set(LEXER_GRAMMAR PropositionalLogicLexer)
set(PARSER_GRAMMAR PropositionalLogicParser)

# Copy grammar file to build tree.
#
# This copy is required because ANTLR's current build system does not support
# multiple `-lib` flags. Therefore, before generating the ANTLR target from the
# grammar file, this and any dependencies of the grammar must be siblings.
add_custom_command(
  OUTPUT "${CMAKE_BINARY_DIR}/antlr/grammars/${LEXER_GRAMMAR}.g4"
  COMMAND ${CMAKE_COMMAND} -E copy "${CMAKE_CURRENT_SOURCE_DIR}/${LEXER_GRAMMAR}.g4" "${CMAKE_BINARY_DIR}/antlr/grammars/"
  MAIN_DEPENDENCY "${LEXER_GRAMMAR}.g4"

  # This set of dependencies should reflect the imports of this grammar file.
  # In setting this, it ensures that any dependencies this grammar file has are
  # present before running this command (i.e., copying).
  DEPENDS CommonLexerGrammarFile
)

# Add target to link with command.
#
# A target for copying must be used instead of the normal `DEPENDS` option on
# the custom target for the ANTLR target, so the copying dependency works
# across all CMakeLists and not just locally in this one.
add_custom_target("${LEXER_GRAMMAR}GrammarFile"
  DEPENDS "${CMAKE_BINARY_DIR}/antlr/grammars/${LEXER_GRAMMAR}.g4"
)

# Generate instructions to build the ANTLR target.
#
# This setups the command call to `antlr4` to parse the grammar file and build
# the selected target (i.e., a parser or lexer).
#
# NOTE: This macro does NOT create a CMake target but rather configures a command
# through the `add_custom_command` macro.
antlr_target(${LEXER_GRAMMAR}
  "${CMAKE_BINARY_DIR}/antlr/grammars/${LEXER_GRAMMAR}.g4"
  LEXER
  PACKAGE "pyforel::specification::pl::gen"
  OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/antlr/pl/
)

# Create the target that depends on the ANTLR results.
#
# This is the main target to be used to generate the resulting ANTLR targets
# which indirectly calls the command generated by `antlr_target` macro which
# indirectly calls the copy command if the grammar file is not present.
add_custom_target(${LEXER_GRAMMAR}
  DEPENDS "${ANTLR_${LEXER_GRAMMAR}_OUTPUTS}"
)

# Copy grammar file to build tree.
#
# This copy is required because ANTLR's current build system does not support
# multiple `-lib` flags. Therefore, before generating the ANTLR target from the
# grammar file, this and any dependencies of the grammar must be siblings.
add_custom_command(
  OUTPUT "${CMAKE_BINARY_DIR}/antlr/grammars/${PARSER_GRAMMAR}.g4"
  COMMAND ${CMAKE_COMMAND} -E copy "${CMAKE_CURRENT_SOURCE_DIR}/${PARSER_GRAMMAR}.g4" "${CMAKE_BINARY_DIR}/antlr/grammars/"
  MAIN_DEPENDENCY "${PARSER_GRAMMAR}.g4"
)

# Add target to link with command.
#
# A target for copying must be used instead of the normal `DEPENDS` option on
# the custom target for the ANTLR target, so the copying dependency works
# across all CMakeLists and not just locally in this one.
add_custom_target("${PARSER_GRAMMAR}GrammarFile"
  DEPENDS "${CMAKE_BINARY_DIR}/antlr/grammars/${PARSER_GRAMMAR}.g4"
)

# Generate instructions to build the ANTLR target.
#
# This setups the command call to `antlr4` to parse the grammar file and build
# the selected target (i.e., a parser or lexer).
#
# NOTE: This macro does NOT create a CMake target but rather configures a command
# through the `add_custom_command` macro.
antlr_target(${PARSER_GRAMMAR}
  "${CMAKE_BINARY_DIR}/antlr/grammars/${PARSER_GRAMMAR}.g4"
  PARSER
  VISITOR
  PACKAGE "pyforel::specification::pl::gen"
  OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/antlr/pl/
  DEPENDS_ANTLR ${LEXER_GRAMMAR}
  COMPILE_FLAGS -DtokenVocab=${LEXER_GRAMMAR}
)

# Create the target that depends on the ANTLR results.
#
# This is the main target to be used to generate the resulting ANTLR targets
# which indirectly calls the command generated by `antlr_target` macro which
# indirectly calls the copy command if the grammar file is not present.
add_custom_target(${PARSER_GRAMMAR}
  DEPENDS "${ANTLR_${PARSER_GRAMMAR}_OUTPUTS}"
)
