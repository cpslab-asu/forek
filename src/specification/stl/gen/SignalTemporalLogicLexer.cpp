
// Generated from /home/andersonjwan/Projects/forek/build/antlr/grammars/SignalTemporalLogicLexer.g4 by ANTLR 4.11.1


#include "SignalTemporalLogicLexer.h"


using namespace antlr4;

using namespace gen;


using namespace antlr4;

namespace {

struct SignalTemporalLogicLexerStaticData final {
  SignalTemporalLogicLexerStaticData(std::vector<std::string> ruleNames,
                          std::vector<std::string> channelNames,
                          std::vector<std::string> modeNames,
                          std::vector<std::string> literalNames,
                          std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), channelNames(std::move(channelNames)),
        modeNames(std::move(modeNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  SignalTemporalLogicLexerStaticData(const SignalTemporalLogicLexerStaticData&) = delete;
  SignalTemporalLogicLexerStaticData(SignalTemporalLogicLexerStaticData&&) = delete;
  SignalTemporalLogicLexerStaticData& operator=(const SignalTemporalLogicLexerStaticData&) = delete;
  SignalTemporalLogicLexerStaticData& operator=(SignalTemporalLogicLexerStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> channelNames;
  const std::vector<std::string> modeNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag signaltemporallogiclexerLexerOnceFlag;
SignalTemporalLogicLexerStaticData *signaltemporallogiclexerLexerStaticData = nullptr;

void signaltemporallogiclexerLexerInitialize() {
  assert(signaltemporallogiclexerLexerStaticData == nullptr);
  auto staticData = std::make_unique<SignalTemporalLogicLexerStaticData>(
    std::vector<std::string>{
      "LessThanOrEqualTo", "GreaterThanOrEqualTo", "EqualTo", "NotEqualTo", 
      "OnceOperator", "HistoricallyOperator", "PreviousOperator", "SinceOperator", 
      "TriggerOperator", "EventuallyOperator", "AlwaysOperator", "NextOperator", 
      "UntilOperator", "ReleaseOperator", "NegationOperator", "ConjunctionOperator", 
      "DisjunctionOperator", "ImplicationOperator", "IffOperator", "True", 
      "False", "AT", "AMPERSAND", "APOSTROPHE", "ASTERICK", "BAR", "CARET", 
      "COLON", "Comma", "DOLLARSIGN", "DOT", "EQUAL", "EXCLAMATIONMARK", 
      "GRAVEACCENT", "HASH", "MINUS", "PERCENTSIGN", "PLUS", "QUESTIONMARK", 
      "QUOTATIONMARK", "SEMICOLON", "TILDE", "UNDERSCORE", "SLASH", "BACKSLASH", 
      "LeftBrace", "RightBrace", "LeftBracket", "RightBracket", "LeftChevron", 
      "RightChevron", "LeftParenthesis", "RightParenthesis", "BlockComment", 
      "LineComment", "Infinity", "Scalar", "Integer", "DecimalInteger", 
      "BinaryInteger", "OctalInteger", "HexInteger", "Floating", "PointFloat", 
      "ExponentFloat", "Identifier", "LETTER", "NONDIGIT", "BINDIGIT", "HEXDIGIT", 
      "OCTALDIGIT", "FRACTION", "EXPONENT", "NONZERODIGIT", "DIGIT", "Whitespace", 
      "AdditionOperator", "SubtractionOperator", "MultiplicationOperator", 
      "DivisionOperator", "ModuloOperator"
    },
    std::vector<std::string>{
      "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    },
    std::vector<std::string>{
      "DEFAULT_MODE"
    },
    std::vector<std::string>{
      "", "'<='", "'>='", "'=='", "'!='", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "'true'", "'false'", "','", "'{'", "'}'", 
      "'['", "']'", "'<'", "'>'", "'('", "')'", "", "", "'inf'"
    },
    std::vector<std::string>{
      "", "LessThanOrEqualTo", "GreaterThanOrEqualTo", "EqualTo", "NotEqualTo", 
      "OnceOperator", "HistoricallyOperator", "PreviousOperator", "SinceOperator", 
      "TriggerOperator", "EventuallyOperator", "AlwaysOperator", "NextOperator", 
      "UntilOperator", "ReleaseOperator", "NegationOperator", "ConjunctionOperator", 
      "DisjunctionOperator", "ImplicationOperator", "IffOperator", "True", 
      "False", "Comma", "LeftBrace", "RightBrace", "LeftBracket", "RightBracket", 
      "LeftChevron", "RightChevron", "LeftParenthesis", "RightParenthesis", 
      "BlockComment", "LineComment", "Infinity", "Scalar", "Integer", "DecimalInteger", 
      "BinaryInteger", "OctalInteger", "HexInteger", "Floating", "PointFloat", 
      "ExponentFloat", "Identifier", "Whitespace", "AdditionOperator", "SubtractionOperator", 
      "MultiplicationOperator", "DivisionOperator", "ModuloOperator"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,0,49,556,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
  	6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
  	7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,
  	7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,
  	7,77,2,78,7,78,2,79,7,79,2,80,7,80,1,0,1,0,1,0,1,1,1,1,1,1,1,2,1,2,1,
  	2,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,3,4,181,8,4,1,5,1,5,1,5,1,5,1,5,1,5,
  	1,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,196,8,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,
  	6,1,6,3,6,207,8,6,1,7,1,7,1,7,1,7,1,7,1,7,3,7,215,8,7,1,8,1,8,1,8,1,8,
  	1,8,1,8,1,8,1,8,3,8,225,8,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,
  	9,3,9,238,8,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,3,10,247,8,10,1,11,1,
  	11,1,11,1,11,1,11,3,11,254,8,11,1,12,1,12,1,12,1,12,1,12,1,12,3,12,262,
  	8,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,3,13,272,8,13,1,14,1,14,
  	1,14,1,14,3,14,278,8,14,1,15,1,15,1,15,1,15,1,15,3,15,285,8,15,1,16,1,
  	16,1,16,1,16,3,16,291,8,16,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,
  	17,3,17,302,8,17,1,18,1,18,1,18,1,18,1,18,1,18,3,18,310,8,18,1,19,1,19,
  	1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,22,1,22,1,23,
  	1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,28,1,29,1,29,1,30,
  	1,30,1,31,1,31,1,32,1,32,1,33,1,33,1,34,1,34,1,35,1,35,1,36,1,36,1,37,
  	1,37,1,38,1,38,1,39,1,39,1,40,1,40,1,41,1,41,1,42,1,42,1,43,1,43,1,44,
  	1,44,1,45,1,45,1,46,1,46,1,47,1,47,1,48,1,48,1,49,1,49,1,50,1,50,1,51,
  	1,51,1,52,1,52,1,53,1,53,1,53,1,53,5,53,391,8,53,10,53,12,53,394,9,53,
  	1,53,1,53,1,53,1,53,1,53,1,54,1,54,1,54,1,54,5,54,405,8,54,10,54,12,54,
  	408,9,54,1,54,3,54,411,8,54,1,54,1,54,1,54,1,54,1,55,1,55,1,55,1,55,1,
  	56,1,56,3,56,423,8,56,1,57,1,57,1,57,1,57,3,57,429,8,57,1,58,1,58,5,58,
  	433,8,58,10,58,12,58,436,9,58,1,58,4,58,439,8,58,11,58,12,58,440,3,58,
  	443,8,58,1,59,1,59,1,59,4,59,448,8,59,11,59,12,59,449,1,60,1,60,1,60,
  	4,60,455,8,60,11,60,12,60,456,1,61,1,61,1,61,4,61,462,8,61,11,61,12,61,
  	463,1,62,1,62,3,62,468,8,62,1,63,4,63,471,8,63,11,63,12,63,472,3,63,475,
  	8,63,1,63,1,63,4,63,479,8,63,11,63,12,63,480,1,63,1,63,3,63,485,8,63,
  	1,64,4,64,488,8,64,11,64,12,64,489,1,64,3,64,493,8,64,1,64,1,64,1,65,
  	4,65,498,8,65,11,65,12,65,499,1,65,1,65,5,65,504,8,65,10,65,12,65,507,
  	9,65,1,66,1,66,1,67,1,67,3,67,513,8,67,1,68,1,68,1,69,1,69,1,70,1,70,
  	1,71,1,71,4,71,523,8,71,11,71,12,71,524,1,72,1,72,3,72,529,8,72,1,72,
  	4,72,532,8,72,11,72,12,72,533,1,73,1,73,1,74,1,74,1,75,4,75,541,8,75,
  	11,75,12,75,542,1,75,1,75,1,76,1,76,1,77,1,77,1,78,1,78,1,79,1,79,1,80,
  	1,80,2,392,406,0,81,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,
  	11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,0,45,
  	0,47,0,49,0,51,0,53,0,55,0,57,22,59,0,61,0,63,0,65,0,67,0,69,0,71,0,73,
  	0,75,0,77,0,79,0,81,0,83,0,85,0,87,0,89,0,91,23,93,24,95,25,97,26,99,
  	27,101,28,103,29,105,30,107,31,109,32,111,33,113,34,115,35,117,36,119,
  	37,121,38,123,39,125,40,127,41,129,42,131,43,133,0,135,0,137,0,139,0,
  	141,0,143,0,145,0,147,0,149,0,151,44,153,45,155,46,157,47,159,48,161,
  	49,1,0,12,2,0,66,66,98,98,2,0,79,79,111,111,2,0,88,88,120,120,2,0,65,
  	90,97,122,1,0,48,49,3,0,48,57,65,70,97,102,1,0,48,55,2,0,69,69,101,101,
  	2,0,43,43,45,45,1,0,49,57,1,0,48,57,3,0,9,10,13,13,32,32,566,0,1,1,0,
  	0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,
  	1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,
  	0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,
  	0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,57,1,0,0,0,0,91,
  	1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,
  	0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,0,109,1,0,0,0,0,111,1,0,
  	0,0,0,113,1,0,0,0,0,115,1,0,0,0,0,117,1,0,0,0,0,119,1,0,0,0,0,121,1,0,
  	0,0,0,123,1,0,0,0,0,125,1,0,0,0,0,127,1,0,0,0,0,129,1,0,0,0,0,131,1,0,
  	0,0,0,151,1,0,0,0,0,153,1,0,0,0,0,155,1,0,0,0,0,157,1,0,0,0,0,159,1,0,
  	0,0,0,161,1,0,0,0,1,163,1,0,0,0,3,166,1,0,0,0,5,169,1,0,0,0,7,172,1,0,
  	0,0,9,180,1,0,0,0,11,195,1,0,0,0,13,206,1,0,0,0,15,214,1,0,0,0,17,224,
  	1,0,0,0,19,237,1,0,0,0,21,246,1,0,0,0,23,253,1,0,0,0,25,261,1,0,0,0,27,
  	271,1,0,0,0,29,277,1,0,0,0,31,284,1,0,0,0,33,290,1,0,0,0,35,301,1,0,0,
  	0,37,309,1,0,0,0,39,311,1,0,0,0,41,316,1,0,0,0,43,322,1,0,0,0,45,324,
  	1,0,0,0,47,326,1,0,0,0,49,328,1,0,0,0,51,330,1,0,0,0,53,332,1,0,0,0,55,
  	334,1,0,0,0,57,336,1,0,0,0,59,338,1,0,0,0,61,340,1,0,0,0,63,342,1,0,0,
  	0,65,344,1,0,0,0,67,346,1,0,0,0,69,348,1,0,0,0,71,350,1,0,0,0,73,352,
  	1,0,0,0,75,354,1,0,0,0,77,356,1,0,0,0,79,358,1,0,0,0,81,360,1,0,0,0,83,
  	362,1,0,0,0,85,364,1,0,0,0,87,366,1,0,0,0,89,368,1,0,0,0,91,370,1,0,0,
  	0,93,372,1,0,0,0,95,374,1,0,0,0,97,376,1,0,0,0,99,378,1,0,0,0,101,380,
  	1,0,0,0,103,382,1,0,0,0,105,384,1,0,0,0,107,386,1,0,0,0,109,400,1,0,0,
  	0,111,416,1,0,0,0,113,422,1,0,0,0,115,428,1,0,0,0,117,442,1,0,0,0,119,
  	444,1,0,0,0,121,451,1,0,0,0,123,458,1,0,0,0,125,467,1,0,0,0,127,484,1,
  	0,0,0,129,492,1,0,0,0,131,497,1,0,0,0,133,508,1,0,0,0,135,512,1,0,0,0,
  	137,514,1,0,0,0,139,516,1,0,0,0,141,518,1,0,0,0,143,520,1,0,0,0,145,526,
  	1,0,0,0,147,535,1,0,0,0,149,537,1,0,0,0,151,540,1,0,0,0,153,546,1,0,0,
  	0,155,548,1,0,0,0,157,550,1,0,0,0,159,552,1,0,0,0,161,554,1,0,0,0,163,
  	164,5,60,0,0,164,165,5,61,0,0,165,2,1,0,0,0,166,167,5,62,0,0,167,168,
  	5,61,0,0,168,4,1,0,0,0,169,170,5,61,0,0,170,171,5,61,0,0,171,6,1,0,0,
  	0,172,173,5,33,0,0,173,174,5,61,0,0,174,8,1,0,0,0,175,181,5,79,0,0,176,
  	177,5,111,0,0,177,178,5,110,0,0,178,179,5,99,0,0,179,181,5,101,0,0,180,
  	175,1,0,0,0,180,176,1,0,0,0,181,10,1,0,0,0,182,196,5,72,0,0,183,184,5,
  	104,0,0,184,185,5,105,0,0,185,186,5,115,0,0,186,187,5,116,0,0,187,188,
  	5,111,0,0,188,189,5,114,0,0,189,190,5,105,0,0,190,191,5,99,0,0,191,192,
  	5,97,0,0,192,193,5,108,0,0,193,194,5,108,0,0,194,196,5,121,0,0,195,182,
  	1,0,0,0,195,183,1,0,0,0,196,12,1,0,0,0,197,207,5,80,0,0,198,199,5,112,
  	0,0,199,200,5,114,0,0,200,201,5,101,0,0,201,202,5,118,0,0,202,203,5,105,
  	0,0,203,204,5,111,0,0,204,205,5,117,0,0,205,207,5,115,0,0,206,197,1,0,
  	0,0,206,198,1,0,0,0,207,14,1,0,0,0,208,215,5,83,0,0,209,210,5,115,0,0,
  	210,211,5,105,0,0,211,212,5,110,0,0,212,213,5,99,0,0,213,215,5,101,0,
  	0,214,208,1,0,0,0,214,209,1,0,0,0,215,16,1,0,0,0,216,225,5,84,0,0,217,
  	218,5,116,0,0,218,219,5,114,0,0,219,220,5,105,0,0,220,221,5,103,0,0,221,
  	222,5,103,0,0,222,223,5,101,0,0,223,225,5,114,0,0,224,216,1,0,0,0,224,
  	217,1,0,0,0,225,18,1,0,0,0,226,238,5,70,0,0,227,228,5,101,0,0,228,229,
  	5,118,0,0,229,230,5,101,0,0,230,231,5,110,0,0,231,232,5,116,0,0,232,233,
  	5,117,0,0,233,234,5,97,0,0,234,235,5,108,0,0,235,236,5,108,0,0,236,238,
  	5,121,0,0,237,226,1,0,0,0,237,227,1,0,0,0,238,20,1,0,0,0,239,247,5,71,
  	0,0,240,241,5,97,0,0,241,242,5,108,0,0,242,243,5,119,0,0,243,244,5,97,
  	0,0,244,245,5,121,0,0,245,247,5,115,0,0,246,239,1,0,0,0,246,240,1,0,0,
  	0,247,22,1,0,0,0,248,254,5,88,0,0,249,250,5,110,0,0,250,251,5,101,0,0,
  	251,252,5,120,0,0,252,254,5,116,0,0,253,248,1,0,0,0,253,249,1,0,0,0,254,
  	24,1,0,0,0,255,262,5,85,0,0,256,257,5,117,0,0,257,258,5,110,0,0,258,259,
  	5,116,0,0,259,260,5,105,0,0,260,262,5,108,0,0,261,255,1,0,0,0,261,256,
  	1,0,0,0,262,26,1,0,0,0,263,272,5,82,0,0,264,265,5,114,0,0,265,266,5,101,
  	0,0,266,267,5,108,0,0,267,268,5,101,0,0,268,269,5,97,0,0,269,270,5,115,
  	0,0,270,272,5,101,0,0,271,263,1,0,0,0,271,264,1,0,0,0,272,28,1,0,0,0,
  	273,278,3,65,32,0,274,275,5,110,0,0,275,276,5,111,0,0,276,278,5,116,0,
  	0,277,273,1,0,0,0,277,274,1,0,0,0,278,30,1,0,0,0,279,280,5,38,0,0,280,
  	285,5,38,0,0,281,282,5,97,0,0,282,283,5,110,0,0,283,285,5,100,0,0,284,
  	279,1,0,0,0,284,281,1,0,0,0,285,32,1,0,0,0,286,287,5,124,0,0,287,291,
  	5,124,0,0,288,289,5,111,0,0,289,291,5,114,0,0,290,286,1,0,0,0,290,288,
  	1,0,0,0,291,34,1,0,0,0,292,293,5,45,0,0,293,302,5,62,0,0,294,295,5,105,
  	0,0,295,296,5,109,0,0,296,297,5,112,0,0,297,298,5,108,0,0,298,299,5,105,
  	0,0,299,300,5,101,0,0,300,302,5,115,0,0,301,292,1,0,0,0,301,294,1,0,0,
  	0,302,36,1,0,0,0,303,304,5,60,0,0,304,305,5,45,0,0,305,310,5,62,0,0,306,
  	307,5,105,0,0,307,308,5,102,0,0,308,310,5,102,0,0,309,303,1,0,0,0,309,
  	306,1,0,0,0,310,38,1,0,0,0,311,312,5,116,0,0,312,313,5,114,0,0,313,314,
  	5,117,0,0,314,315,5,101,0,0,315,40,1,0,0,0,316,317,5,102,0,0,317,318,
  	5,97,0,0,318,319,5,108,0,0,319,320,5,115,0,0,320,321,5,101,0,0,321,42,
  	1,0,0,0,322,323,5,64,0,0,323,44,1,0,0,0,324,325,5,38,0,0,325,46,1,0,0,
  	0,326,327,5,39,0,0,327,48,1,0,0,0,328,329,5,42,0,0,329,50,1,0,0,0,330,
  	331,5,124,0,0,331,52,1,0,0,0,332,333,5,94,0,0,333,54,1,0,0,0,334,335,
  	5,58,0,0,335,56,1,0,0,0,336,337,5,44,0,0,337,58,1,0,0,0,338,339,5,36,
  	0,0,339,60,1,0,0,0,340,341,5,46,0,0,341,62,1,0,0,0,342,343,5,61,0,0,343,
  	64,1,0,0,0,344,345,5,33,0,0,345,66,1,0,0,0,346,347,5,96,0,0,347,68,1,
  	0,0,0,348,349,5,35,0,0,349,70,1,0,0,0,350,351,5,45,0,0,351,72,1,0,0,0,
  	352,353,5,37,0,0,353,74,1,0,0,0,354,355,5,43,0,0,355,76,1,0,0,0,356,357,
  	5,63,0,0,357,78,1,0,0,0,358,359,5,34,0,0,359,80,1,0,0,0,360,361,5,59,
  	0,0,361,82,1,0,0,0,362,363,5,126,0,0,363,84,1,0,0,0,364,365,5,95,0,0,
  	365,86,1,0,0,0,366,367,5,47,0,0,367,88,1,0,0,0,368,369,5,92,0,0,369,90,
  	1,0,0,0,370,371,5,123,0,0,371,92,1,0,0,0,372,373,5,125,0,0,373,94,1,0,
  	0,0,374,375,5,91,0,0,375,96,1,0,0,0,376,377,5,93,0,0,377,98,1,0,0,0,378,
  	379,5,60,0,0,379,100,1,0,0,0,380,381,5,62,0,0,381,102,1,0,0,0,382,383,
  	5,40,0,0,383,104,1,0,0,0,384,385,5,41,0,0,385,106,1,0,0,0,386,387,5,47,
  	0,0,387,388,5,42,0,0,388,392,1,0,0,0,389,391,9,0,0,0,390,389,1,0,0,0,
  	391,394,1,0,0,0,392,393,1,0,0,0,392,390,1,0,0,0,393,395,1,0,0,0,394,392,
  	1,0,0,0,395,396,5,42,0,0,396,397,5,47,0,0,397,398,1,0,0,0,398,399,6,53,
  	0,0,399,108,1,0,0,0,400,401,5,47,0,0,401,402,5,47,0,0,402,406,1,0,0,0,
  	403,405,9,0,0,0,404,403,1,0,0,0,405,408,1,0,0,0,406,407,1,0,0,0,406,404,
  	1,0,0,0,407,410,1,0,0,0,408,406,1,0,0,0,409,411,5,13,0,0,410,409,1,0,
  	0,0,410,411,1,0,0,0,411,412,1,0,0,0,412,413,5,10,0,0,413,414,1,0,0,0,
  	414,415,6,54,0,0,415,110,1,0,0,0,416,417,5,105,0,0,417,418,5,110,0,0,
  	418,419,5,102,0,0,419,112,1,0,0,0,420,423,3,115,57,0,421,423,3,125,62,
  	0,422,420,1,0,0,0,422,421,1,0,0,0,423,114,1,0,0,0,424,429,3,117,58,0,
  	425,429,3,119,59,0,426,429,3,121,60,0,427,429,3,123,61,0,428,424,1,0,
  	0,0,428,425,1,0,0,0,428,426,1,0,0,0,428,427,1,0,0,0,429,116,1,0,0,0,430,
  	434,3,147,73,0,431,433,3,149,74,0,432,431,1,0,0,0,433,436,1,0,0,0,434,
  	432,1,0,0,0,434,435,1,0,0,0,435,443,1,0,0,0,436,434,1,0,0,0,437,439,5,
  	48,0,0,438,437,1,0,0,0,439,440,1,0,0,0,440,438,1,0,0,0,440,441,1,0,0,
  	0,441,443,1,0,0,0,442,430,1,0,0,0,442,438,1,0,0,0,443,118,1,0,0,0,444,
  	445,5,48,0,0,445,447,7,0,0,0,446,448,3,137,68,0,447,446,1,0,0,0,448,449,
  	1,0,0,0,449,447,1,0,0,0,449,450,1,0,0,0,450,120,1,0,0,0,451,452,5,48,
  	0,0,452,454,7,1,0,0,453,455,3,141,70,0,454,453,1,0,0,0,455,456,1,0,0,
  	0,456,454,1,0,0,0,456,457,1,0,0,0,457,122,1,0,0,0,458,459,5,48,0,0,459,
  	461,7,2,0,0,460,462,3,139,69,0,461,460,1,0,0,0,462,463,1,0,0,0,463,461,
  	1,0,0,0,463,464,1,0,0,0,464,124,1,0,0,0,465,468,3,127,63,0,466,468,3,
  	129,64,0,467,465,1,0,0,0,467,466,1,0,0,0,468,126,1,0,0,0,469,471,3,149,
  	74,0,470,469,1,0,0,0,471,472,1,0,0,0,472,470,1,0,0,0,472,473,1,0,0,0,
  	473,475,1,0,0,0,474,470,1,0,0,0,474,475,1,0,0,0,475,476,1,0,0,0,476,485,
  	3,143,71,0,477,479,3,149,74,0,478,477,1,0,0,0,479,480,1,0,0,0,480,478,
  	1,0,0,0,480,481,1,0,0,0,481,482,1,0,0,0,482,483,5,46,0,0,483,485,1,0,
  	0,0,484,474,1,0,0,0,484,478,1,0,0,0,485,128,1,0,0,0,486,488,3,149,74,
  	0,487,486,1,0,0,0,488,489,1,0,0,0,489,487,1,0,0,0,489,490,1,0,0,0,490,
  	493,1,0,0,0,491,493,3,127,63,0,492,487,1,0,0,0,492,491,1,0,0,0,493,494,
  	1,0,0,0,494,495,3,145,72,0,495,130,1,0,0,0,496,498,3,135,67,0,497,496,
  	1,0,0,0,498,499,1,0,0,0,499,497,1,0,0,0,499,500,1,0,0,0,500,505,1,0,0,
  	0,501,504,3,135,67,0,502,504,3,149,74,0,503,501,1,0,0,0,503,502,1,0,0,
  	0,504,507,1,0,0,0,505,503,1,0,0,0,505,506,1,0,0,0,506,132,1,0,0,0,507,
  	505,1,0,0,0,508,509,7,3,0,0,509,134,1,0,0,0,510,513,3,133,66,0,511,513,
  	5,95,0,0,512,510,1,0,0,0,512,511,1,0,0,0,513,136,1,0,0,0,514,515,7,4,
  	0,0,515,138,1,0,0,0,516,517,7,5,0,0,517,140,1,0,0,0,518,519,7,6,0,0,519,
  	142,1,0,0,0,520,522,5,46,0,0,521,523,3,149,74,0,522,521,1,0,0,0,523,524,
  	1,0,0,0,524,522,1,0,0,0,524,525,1,0,0,0,525,144,1,0,0,0,526,528,7,7,0,
  	0,527,529,7,8,0,0,528,527,1,0,0,0,528,529,1,0,0,0,529,531,1,0,0,0,530,
  	532,3,149,74,0,531,530,1,0,0,0,532,533,1,0,0,0,533,531,1,0,0,0,533,534,
  	1,0,0,0,534,146,1,0,0,0,535,536,7,9,0,0,536,148,1,0,0,0,537,538,7,10,
  	0,0,538,150,1,0,0,0,539,541,7,11,0,0,540,539,1,0,0,0,541,542,1,0,0,0,
  	542,540,1,0,0,0,542,543,1,0,0,0,543,544,1,0,0,0,544,545,6,75,0,0,545,
  	152,1,0,0,0,546,547,3,75,37,0,547,154,1,0,0,0,548,549,3,71,35,0,549,156,
  	1,0,0,0,550,551,3,49,24,0,551,158,1,0,0,0,552,553,3,87,43,0,553,160,1,
  	0,0,0,554,555,3,73,36,0,555,162,1,0,0,0,42,0,180,195,206,214,224,237,
  	246,253,261,271,277,284,290,301,309,392,406,410,422,428,434,440,442,449,
  	456,463,467,472,474,480,484,489,492,499,503,505,512,524,528,533,542,1,
  	6,0,0
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  signaltemporallogiclexerLexerStaticData = staticData.release();
}

}

SignalTemporalLogicLexer::SignalTemporalLogicLexer(CharStream *input) : Lexer(input) {
  SignalTemporalLogicLexer::initialize();
  _interpreter = new atn::LexerATNSimulator(this, *signaltemporallogiclexerLexerStaticData->atn, signaltemporallogiclexerLexerStaticData->decisionToDFA, signaltemporallogiclexerLexerStaticData->sharedContextCache);
}

SignalTemporalLogicLexer::~SignalTemporalLogicLexer() {
  delete _interpreter;
}

std::string SignalTemporalLogicLexer::getGrammarFileName() const {
  return "SignalTemporalLogicLexer.g4";
}

const std::vector<std::string>& SignalTemporalLogicLexer::getRuleNames() const {
  return signaltemporallogiclexerLexerStaticData->ruleNames;
}

const std::vector<std::string>& SignalTemporalLogicLexer::getChannelNames() const {
  return signaltemporallogiclexerLexerStaticData->channelNames;
}

const std::vector<std::string>& SignalTemporalLogicLexer::getModeNames() const {
  return signaltemporallogiclexerLexerStaticData->modeNames;
}

const dfa::Vocabulary& SignalTemporalLogicLexer::getVocabulary() const {
  return signaltemporallogiclexerLexerStaticData->vocabulary;
}

antlr4::atn::SerializedATNView SignalTemporalLogicLexer::getSerializedATN() const {
  return signaltemporallogiclexerLexerStaticData->serializedATN;
}

const atn::ATN& SignalTemporalLogicLexer::getATN() const {
  return *signaltemporallogiclexerLexerStaticData->atn;
}




void SignalTemporalLogicLexer::initialize() {
  ::antlr4::internal::call_once(signaltemporallogiclexerLexerOnceFlag, signaltemporallogiclexerLexerInitialize);
}
