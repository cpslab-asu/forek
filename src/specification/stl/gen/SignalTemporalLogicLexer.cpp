
// Generated from /home/andersonjwan/Projects/forek/build/antlr/grammars/SignalTemporalLogicLexer.g4 by ANTLR 4.11.1


#include "SignalTemporalLogicLexer.h"


using namespace antlr4;

using namespace gen;


using namespace antlr4;

namespace {

struct SignalTemporalLogicLexerStaticData final {
  SignalTemporalLogicLexerStaticData(std::vector<std::string> ruleNames,
                          std::vector<std::string> channelNames,
                          std::vector<std::string> modeNames,
                          std::vector<std::string> literalNames,
                          std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), channelNames(std::move(channelNames)),
        modeNames(std::move(modeNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  SignalTemporalLogicLexerStaticData(const SignalTemporalLogicLexerStaticData&) = delete;
  SignalTemporalLogicLexerStaticData(SignalTemporalLogicLexerStaticData&&) = delete;
  SignalTemporalLogicLexerStaticData& operator=(const SignalTemporalLogicLexerStaticData&) = delete;
  SignalTemporalLogicLexerStaticData& operator=(SignalTemporalLogicLexerStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> channelNames;
  const std::vector<std::string> modeNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag signaltemporallogiclexerLexerOnceFlag;
SignalTemporalLogicLexerStaticData *signaltemporallogiclexerLexerStaticData = nullptr;

void signaltemporallogiclexerLexerInitialize() {
  assert(signaltemporallogiclexerLexerStaticData == nullptr);
  auto staticData = std::make_unique<SignalTemporalLogicLexerStaticData>(
    std::vector<std::string>{
      "LessThanOrEqualTo", "GreaterThanOrEqualTo", "EqualTo", "NotEqualTo", 
      "EventuallyOperator", "AlwaysOperator", "NextOperator", "UntilOperator", 
      "ReleaseOperator", "NegationOperator", "ConjunctionOperator", "DisjunctionOperator", 
      "ImplicationOperator", "IffOperator", "True", "False", "AT", "AMPERSAND", 
      "APOSTROPHE", "ASTERICK", "BAR", "CARET", "COLON", "Comma", "DOLLARSIGN", 
      "DOT", "EQUAL", "EXCLAMATIONMARK", "GRAVEACCENT", "HASH", "MINUS", 
      "PERCENTSIGN", "PLUS", "QUESTIONMARK", "QUOTATIONMARK", "SEMICOLON", 
      "TILDE", "UNDERSCORE", "SLASH", "BACKSLASH", "LeftBrace", "RightBrace", 
      "LeftBracket", "RightBracket", "LeftChevron", "RightChevron", "LeftParenthesis", 
      "RightParenthesis", "BlockComment", "LineComment", "Infinity", "Scalar", 
      "Integer", "DecimalInteger", "BinaryInteger", "OctalInteger", "HexInteger", 
      "Floating", "PointFloat", "ExponentFloat", "Identifier", "LETTER", 
      "NONDIGIT", "BINDIGIT", "HEXDIGIT", "OCTALDIGIT", "FRACTION", "EXPONENT", 
      "NONZERODIGIT", "DIGIT", "Whitespace", "AdditionOperator", "SubtractionOperator", 
      "MultiplicationOperator", "DivisionOperator", "ModulusOperator"
    },
    std::vector<std::string>{
      "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    },
    std::vector<std::string>{
      "DEFAULT_MODE"
    },
    std::vector<std::string>{
      "", "'<='", "'>='", "'=='", "'!='", "", "", "", "", "", "", "", "", 
      "", "", "'true'", "'false'", "','", "'{'", "'}'", "'['", "']'", "'<'", 
      "'>'", "'('", "')'", "", "", "'inf'"
    },
    std::vector<std::string>{
      "", "LessThanOrEqualTo", "GreaterThanOrEqualTo", "EqualTo", "NotEqualTo", 
      "EventuallyOperator", "AlwaysOperator", "NextOperator", "UntilOperator", 
      "ReleaseOperator", "NegationOperator", "ConjunctionOperator", "DisjunctionOperator", 
      "ImplicationOperator", "IffOperator", "True", "False", "Comma", "LeftBrace", 
      "RightBrace", "LeftBracket", "RightBracket", "LeftChevron", "RightChevron", 
      "LeftParenthesis", "RightParenthesis", "BlockComment", "LineComment", 
      "Infinity", "Scalar", "Integer", "DecimalInteger", "BinaryInteger", 
      "OctalInteger", "HexInteger", "Floating", "PointFloat", "ExponentFloat", 
      "Identifier", "Whitespace", "AdditionOperator", "SubtractionOperator", 
      "MultiplicationOperator", "DivisionOperator", "ModulusOperator"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,0,44,495,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
  	6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
  	7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,
  	7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,1,0,1,0,1,0,1,
  	1,1,1,1,1,1,2,1,2,1,2,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,
  	1,4,1,4,3,4,177,8,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,186,8,5,1,6,1,6,1,
  	6,1,6,1,6,3,6,193,8,6,1,7,1,7,1,7,1,7,1,7,1,7,3,7,201,8,7,1,8,1,8,1,8,
  	1,8,1,8,1,8,1,8,1,8,3,8,211,8,8,1,9,1,9,1,9,1,9,3,9,217,8,9,1,10,1,10,
  	1,10,1,10,1,10,3,10,224,8,10,1,11,1,11,1,11,1,11,3,11,230,8,11,1,12,1,
  	12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,3,12,241,8,12,1,13,1,13,1,13,1,
  	13,1,13,1,13,3,13,249,8,13,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,
  	15,1,15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,
  	21,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,
  	28,1,29,1,29,1,30,1,30,1,31,1,31,1,32,1,32,1,33,1,33,1,34,1,34,1,35,1,
  	35,1,36,1,36,1,37,1,37,1,38,1,38,1,39,1,39,1,40,1,40,1,41,1,41,1,42,1,
  	42,1,43,1,43,1,44,1,44,1,45,1,45,1,46,1,46,1,47,1,47,1,48,1,48,1,48,1,
  	48,5,48,330,8,48,10,48,12,48,333,9,48,1,48,1,48,1,48,1,48,1,48,1,49,1,
  	49,1,49,1,49,5,49,344,8,49,10,49,12,49,347,9,49,1,49,3,49,350,8,49,1,
  	49,1,49,1,49,1,49,1,50,1,50,1,50,1,50,1,51,1,51,3,51,362,8,51,1,52,1,
  	52,1,52,1,52,3,52,368,8,52,1,53,1,53,5,53,372,8,53,10,53,12,53,375,9,
  	53,1,53,4,53,378,8,53,11,53,12,53,379,3,53,382,8,53,1,54,1,54,1,54,4,
  	54,387,8,54,11,54,12,54,388,1,55,1,55,1,55,4,55,394,8,55,11,55,12,55,
  	395,1,56,1,56,1,56,4,56,401,8,56,11,56,12,56,402,1,57,1,57,3,57,407,8,
  	57,1,58,4,58,410,8,58,11,58,12,58,411,3,58,414,8,58,1,58,1,58,4,58,418,
  	8,58,11,58,12,58,419,1,58,1,58,3,58,424,8,58,1,59,4,59,427,8,59,11,59,
  	12,59,428,1,59,3,59,432,8,59,1,59,1,59,1,60,4,60,437,8,60,11,60,12,60,
  	438,1,60,1,60,5,60,443,8,60,10,60,12,60,446,9,60,1,61,1,61,1,62,1,62,
  	3,62,452,8,62,1,63,1,63,1,64,1,64,1,65,1,65,1,66,1,66,4,66,462,8,66,11,
  	66,12,66,463,1,67,1,67,3,67,468,8,67,1,67,4,67,471,8,67,11,67,12,67,472,
  	1,68,1,68,1,69,1,69,1,70,4,70,480,8,70,11,70,12,70,481,1,70,1,70,1,71,
  	1,71,1,72,1,72,1,73,1,73,1,74,1,74,1,75,1,75,2,331,345,0,76,1,1,3,2,5,
  	3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,
  	16,33,0,35,0,37,0,39,0,41,0,43,0,45,0,47,17,49,0,51,0,53,0,55,0,57,0,
  	59,0,61,0,63,0,65,0,67,0,69,0,71,0,73,0,75,0,77,0,79,0,81,18,83,19,85,
  	20,87,21,89,22,91,23,93,24,95,25,97,26,99,27,101,28,103,29,105,30,107,
  	31,109,32,111,33,113,34,115,35,117,36,119,37,121,38,123,0,125,0,127,0,
  	129,0,131,0,133,0,135,0,137,0,139,0,141,39,143,40,145,41,147,42,149,43,
  	151,44,1,0,12,2,0,66,66,98,98,2,0,79,79,111,111,2,0,88,88,120,120,2,0,
  	65,90,97,122,1,0,48,49,3,0,48,57,65,70,97,102,1,0,48,55,2,0,69,69,101,
  	101,2,0,43,43,45,45,1,0,49,57,1,0,48,57,3,0,9,10,13,13,32,32,500,0,1,
  	1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,
  	0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,
  	1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,47,1,0,
  	0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,
  	0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,
  	1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,0,109,1,0,0,0,0,111,
  	1,0,0,0,0,113,1,0,0,0,0,115,1,0,0,0,0,117,1,0,0,0,0,119,1,0,0,0,0,121,
  	1,0,0,0,0,141,1,0,0,0,0,143,1,0,0,0,0,145,1,0,0,0,0,147,1,0,0,0,0,149,
  	1,0,0,0,0,151,1,0,0,0,1,153,1,0,0,0,3,156,1,0,0,0,5,159,1,0,0,0,7,162,
  	1,0,0,0,9,176,1,0,0,0,11,185,1,0,0,0,13,192,1,0,0,0,15,200,1,0,0,0,17,
  	210,1,0,0,0,19,216,1,0,0,0,21,223,1,0,0,0,23,229,1,0,0,0,25,240,1,0,0,
  	0,27,248,1,0,0,0,29,250,1,0,0,0,31,255,1,0,0,0,33,261,1,0,0,0,35,263,
  	1,0,0,0,37,265,1,0,0,0,39,267,1,0,0,0,41,269,1,0,0,0,43,271,1,0,0,0,45,
  	273,1,0,0,0,47,275,1,0,0,0,49,277,1,0,0,0,51,279,1,0,0,0,53,281,1,0,0,
  	0,55,283,1,0,0,0,57,285,1,0,0,0,59,287,1,0,0,0,61,289,1,0,0,0,63,291,
  	1,0,0,0,65,293,1,0,0,0,67,295,1,0,0,0,69,297,1,0,0,0,71,299,1,0,0,0,73,
  	301,1,0,0,0,75,303,1,0,0,0,77,305,1,0,0,0,79,307,1,0,0,0,81,309,1,0,0,
  	0,83,311,1,0,0,0,85,313,1,0,0,0,87,315,1,0,0,0,89,317,1,0,0,0,91,319,
  	1,0,0,0,93,321,1,0,0,0,95,323,1,0,0,0,97,325,1,0,0,0,99,339,1,0,0,0,101,
  	355,1,0,0,0,103,361,1,0,0,0,105,367,1,0,0,0,107,381,1,0,0,0,109,383,1,
  	0,0,0,111,390,1,0,0,0,113,397,1,0,0,0,115,406,1,0,0,0,117,423,1,0,0,0,
  	119,431,1,0,0,0,121,436,1,0,0,0,123,447,1,0,0,0,125,451,1,0,0,0,127,453,
  	1,0,0,0,129,455,1,0,0,0,131,457,1,0,0,0,133,459,1,0,0,0,135,465,1,0,0,
  	0,137,474,1,0,0,0,139,476,1,0,0,0,141,479,1,0,0,0,143,485,1,0,0,0,145,
  	487,1,0,0,0,147,489,1,0,0,0,149,491,1,0,0,0,151,493,1,0,0,0,153,154,5,
  	60,0,0,154,155,5,61,0,0,155,2,1,0,0,0,156,157,5,62,0,0,157,158,5,61,0,
  	0,158,4,1,0,0,0,159,160,5,61,0,0,160,161,5,61,0,0,161,6,1,0,0,0,162,163,
  	5,33,0,0,163,164,5,61,0,0,164,8,1,0,0,0,165,177,5,70,0,0,166,167,5,101,
  	0,0,167,168,5,118,0,0,168,169,5,101,0,0,169,170,5,110,0,0,170,171,5,116,
  	0,0,171,172,5,117,0,0,172,173,5,97,0,0,173,174,5,108,0,0,174,175,5,108,
  	0,0,175,177,5,121,0,0,176,165,1,0,0,0,176,166,1,0,0,0,177,10,1,0,0,0,
  	178,186,5,71,0,0,179,180,5,97,0,0,180,181,5,108,0,0,181,182,5,119,0,0,
  	182,183,5,97,0,0,183,184,5,121,0,0,184,186,5,115,0,0,185,178,1,0,0,0,
  	185,179,1,0,0,0,186,12,1,0,0,0,187,193,5,88,0,0,188,189,5,110,0,0,189,
  	190,5,101,0,0,190,191,5,120,0,0,191,193,5,116,0,0,192,187,1,0,0,0,192,
  	188,1,0,0,0,193,14,1,0,0,0,194,201,5,85,0,0,195,196,5,117,0,0,196,197,
  	5,110,0,0,197,198,5,116,0,0,198,199,5,105,0,0,199,201,5,108,0,0,200,194,
  	1,0,0,0,200,195,1,0,0,0,201,16,1,0,0,0,202,211,5,82,0,0,203,204,5,114,
  	0,0,204,205,5,101,0,0,205,206,5,108,0,0,206,207,5,101,0,0,207,208,5,97,
  	0,0,208,209,5,115,0,0,209,211,5,101,0,0,210,202,1,0,0,0,210,203,1,0,0,
  	0,211,18,1,0,0,0,212,217,3,55,27,0,213,214,5,110,0,0,214,215,5,111,0,
  	0,215,217,5,116,0,0,216,212,1,0,0,0,216,213,1,0,0,0,217,20,1,0,0,0,218,
  	219,5,38,0,0,219,224,5,38,0,0,220,221,5,97,0,0,221,222,5,110,0,0,222,
  	224,5,100,0,0,223,218,1,0,0,0,223,220,1,0,0,0,224,22,1,0,0,0,225,226,
  	5,124,0,0,226,230,5,124,0,0,227,228,5,111,0,0,228,230,5,114,0,0,229,225,
  	1,0,0,0,229,227,1,0,0,0,230,24,1,0,0,0,231,232,5,45,0,0,232,241,5,62,
  	0,0,233,234,5,105,0,0,234,235,5,109,0,0,235,236,5,112,0,0,236,237,5,108,
  	0,0,237,238,5,105,0,0,238,239,5,101,0,0,239,241,5,115,0,0,240,231,1,0,
  	0,0,240,233,1,0,0,0,241,26,1,0,0,0,242,243,5,60,0,0,243,244,5,45,0,0,
  	244,249,5,62,0,0,245,246,5,105,0,0,246,247,5,102,0,0,247,249,5,102,0,
  	0,248,242,1,0,0,0,248,245,1,0,0,0,249,28,1,0,0,0,250,251,5,116,0,0,251,
  	252,5,114,0,0,252,253,5,117,0,0,253,254,5,101,0,0,254,30,1,0,0,0,255,
  	256,5,102,0,0,256,257,5,97,0,0,257,258,5,108,0,0,258,259,5,115,0,0,259,
  	260,5,101,0,0,260,32,1,0,0,0,261,262,5,64,0,0,262,34,1,0,0,0,263,264,
  	5,38,0,0,264,36,1,0,0,0,265,266,5,39,0,0,266,38,1,0,0,0,267,268,5,42,
  	0,0,268,40,1,0,0,0,269,270,5,124,0,0,270,42,1,0,0,0,271,272,5,94,0,0,
  	272,44,1,0,0,0,273,274,5,58,0,0,274,46,1,0,0,0,275,276,5,44,0,0,276,48,
  	1,0,0,0,277,278,5,36,0,0,278,50,1,0,0,0,279,280,5,46,0,0,280,52,1,0,0,
  	0,281,282,5,61,0,0,282,54,1,0,0,0,283,284,5,33,0,0,284,56,1,0,0,0,285,
  	286,5,96,0,0,286,58,1,0,0,0,287,288,5,35,0,0,288,60,1,0,0,0,289,290,5,
  	45,0,0,290,62,1,0,0,0,291,292,5,37,0,0,292,64,1,0,0,0,293,294,5,43,0,
  	0,294,66,1,0,0,0,295,296,5,63,0,0,296,68,1,0,0,0,297,298,5,34,0,0,298,
  	70,1,0,0,0,299,300,5,59,0,0,300,72,1,0,0,0,301,302,5,126,0,0,302,74,1,
  	0,0,0,303,304,5,95,0,0,304,76,1,0,0,0,305,306,5,47,0,0,306,78,1,0,0,0,
  	307,308,5,92,0,0,308,80,1,0,0,0,309,310,5,123,0,0,310,82,1,0,0,0,311,
  	312,5,125,0,0,312,84,1,0,0,0,313,314,5,91,0,0,314,86,1,0,0,0,315,316,
  	5,93,0,0,316,88,1,0,0,0,317,318,5,60,0,0,318,90,1,0,0,0,319,320,5,62,
  	0,0,320,92,1,0,0,0,321,322,5,40,0,0,322,94,1,0,0,0,323,324,5,41,0,0,324,
  	96,1,0,0,0,325,326,5,47,0,0,326,327,5,42,0,0,327,331,1,0,0,0,328,330,
  	9,0,0,0,329,328,1,0,0,0,330,333,1,0,0,0,331,332,1,0,0,0,331,329,1,0,0,
  	0,332,334,1,0,0,0,333,331,1,0,0,0,334,335,5,42,0,0,335,336,5,47,0,0,336,
  	337,1,0,0,0,337,338,6,48,0,0,338,98,1,0,0,0,339,340,5,47,0,0,340,341,
  	5,47,0,0,341,345,1,0,0,0,342,344,9,0,0,0,343,342,1,0,0,0,344,347,1,0,
  	0,0,345,346,1,0,0,0,345,343,1,0,0,0,346,349,1,0,0,0,347,345,1,0,0,0,348,
  	350,5,13,0,0,349,348,1,0,0,0,349,350,1,0,0,0,350,351,1,0,0,0,351,352,
  	5,10,0,0,352,353,1,0,0,0,353,354,6,49,0,0,354,100,1,0,0,0,355,356,5,105,
  	0,0,356,357,5,110,0,0,357,358,5,102,0,0,358,102,1,0,0,0,359,362,3,105,
  	52,0,360,362,3,115,57,0,361,359,1,0,0,0,361,360,1,0,0,0,362,104,1,0,0,
  	0,363,368,3,107,53,0,364,368,3,109,54,0,365,368,3,111,55,0,366,368,3,
  	113,56,0,367,363,1,0,0,0,367,364,1,0,0,0,367,365,1,0,0,0,367,366,1,0,
  	0,0,368,106,1,0,0,0,369,373,3,137,68,0,370,372,3,139,69,0,371,370,1,0,
  	0,0,372,375,1,0,0,0,373,371,1,0,0,0,373,374,1,0,0,0,374,382,1,0,0,0,375,
  	373,1,0,0,0,376,378,5,48,0,0,377,376,1,0,0,0,378,379,1,0,0,0,379,377,
  	1,0,0,0,379,380,1,0,0,0,380,382,1,0,0,0,381,369,1,0,0,0,381,377,1,0,0,
  	0,382,108,1,0,0,0,383,384,5,48,0,0,384,386,7,0,0,0,385,387,3,127,63,0,
  	386,385,1,0,0,0,387,388,1,0,0,0,388,386,1,0,0,0,388,389,1,0,0,0,389,110,
  	1,0,0,0,390,391,5,48,0,0,391,393,7,1,0,0,392,394,3,131,65,0,393,392,1,
  	0,0,0,394,395,1,0,0,0,395,393,1,0,0,0,395,396,1,0,0,0,396,112,1,0,0,0,
  	397,398,5,48,0,0,398,400,7,2,0,0,399,401,3,129,64,0,400,399,1,0,0,0,401,
  	402,1,0,0,0,402,400,1,0,0,0,402,403,1,0,0,0,403,114,1,0,0,0,404,407,3,
  	117,58,0,405,407,3,119,59,0,406,404,1,0,0,0,406,405,1,0,0,0,407,116,1,
  	0,0,0,408,410,3,139,69,0,409,408,1,0,0,0,410,411,1,0,0,0,411,409,1,0,
  	0,0,411,412,1,0,0,0,412,414,1,0,0,0,413,409,1,0,0,0,413,414,1,0,0,0,414,
  	415,1,0,0,0,415,424,3,133,66,0,416,418,3,139,69,0,417,416,1,0,0,0,418,
  	419,1,0,0,0,419,417,1,0,0,0,419,420,1,0,0,0,420,421,1,0,0,0,421,422,5,
  	46,0,0,422,424,1,0,0,0,423,413,1,0,0,0,423,417,1,0,0,0,424,118,1,0,0,
  	0,425,427,3,139,69,0,426,425,1,0,0,0,427,428,1,0,0,0,428,426,1,0,0,0,
  	428,429,1,0,0,0,429,432,1,0,0,0,430,432,3,117,58,0,431,426,1,0,0,0,431,
  	430,1,0,0,0,432,433,1,0,0,0,433,434,3,135,67,0,434,120,1,0,0,0,435,437,
  	3,125,62,0,436,435,1,0,0,0,437,438,1,0,0,0,438,436,1,0,0,0,438,439,1,
  	0,0,0,439,444,1,0,0,0,440,443,3,125,62,0,441,443,3,139,69,0,442,440,1,
  	0,0,0,442,441,1,0,0,0,443,446,1,0,0,0,444,442,1,0,0,0,444,445,1,0,0,0,
  	445,122,1,0,0,0,446,444,1,0,0,0,447,448,7,3,0,0,448,124,1,0,0,0,449,452,
  	3,123,61,0,450,452,5,95,0,0,451,449,1,0,0,0,451,450,1,0,0,0,452,126,1,
  	0,0,0,453,454,7,4,0,0,454,128,1,0,0,0,455,456,7,5,0,0,456,130,1,0,0,0,
  	457,458,7,6,0,0,458,132,1,0,0,0,459,461,5,46,0,0,460,462,3,139,69,0,461,
  	460,1,0,0,0,462,463,1,0,0,0,463,461,1,0,0,0,463,464,1,0,0,0,464,134,1,
  	0,0,0,465,467,7,7,0,0,466,468,7,8,0,0,467,466,1,0,0,0,467,468,1,0,0,0,
  	468,470,1,0,0,0,469,471,3,139,69,0,470,469,1,0,0,0,471,472,1,0,0,0,472,
  	470,1,0,0,0,472,473,1,0,0,0,473,136,1,0,0,0,474,475,7,9,0,0,475,138,1,
  	0,0,0,476,477,7,10,0,0,477,140,1,0,0,0,478,480,7,11,0,0,479,478,1,0,0,
  	0,480,481,1,0,0,0,481,479,1,0,0,0,481,482,1,0,0,0,482,483,1,0,0,0,483,
  	484,6,70,0,0,484,142,1,0,0,0,485,486,3,65,32,0,486,144,1,0,0,0,487,488,
  	3,61,30,0,488,146,1,0,0,0,489,490,3,39,19,0,490,148,1,0,0,0,491,492,3,
  	77,38,0,492,150,1,0,0,0,493,494,3,63,31,0,494,152,1,0,0,0,37,0,176,185,
  	192,200,210,216,223,229,240,248,331,345,349,361,367,373,379,381,388,395,
  	402,406,411,413,419,423,428,431,438,442,444,451,463,467,472,481,1,6,0,
  	0
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  signaltemporallogiclexerLexerStaticData = staticData.release();
}

}

SignalTemporalLogicLexer::SignalTemporalLogicLexer(CharStream *input) : Lexer(input) {
  SignalTemporalLogicLexer::initialize();
  _interpreter = new atn::LexerATNSimulator(this, *signaltemporallogiclexerLexerStaticData->atn, signaltemporallogiclexerLexerStaticData->decisionToDFA, signaltemporallogiclexerLexerStaticData->sharedContextCache);
}

SignalTemporalLogicLexer::~SignalTemporalLogicLexer() {
  delete _interpreter;
}

std::string SignalTemporalLogicLexer::getGrammarFileName() const {
  return "SignalTemporalLogicLexer.g4";
}

const std::vector<std::string>& SignalTemporalLogicLexer::getRuleNames() const {
  return signaltemporallogiclexerLexerStaticData->ruleNames;
}

const std::vector<std::string>& SignalTemporalLogicLexer::getChannelNames() const {
  return signaltemporallogiclexerLexerStaticData->channelNames;
}

const std::vector<std::string>& SignalTemporalLogicLexer::getModeNames() const {
  return signaltemporallogiclexerLexerStaticData->modeNames;
}

const dfa::Vocabulary& SignalTemporalLogicLexer::getVocabulary() const {
  return signaltemporallogiclexerLexerStaticData->vocabulary;
}

antlr4::atn::SerializedATNView SignalTemporalLogicLexer::getSerializedATN() const {
  return signaltemporallogiclexerLexerStaticData->serializedATN;
}

const atn::ATN& SignalTemporalLogicLexer::getATN() const {
  return *signaltemporallogiclexerLexerStaticData->atn;
}




void SignalTemporalLogicLexer::initialize() {
  ::antlr4::internal::call_once(signaltemporallogiclexerLexerOnceFlag, signaltemporallogiclexerLexerInitialize);
}
