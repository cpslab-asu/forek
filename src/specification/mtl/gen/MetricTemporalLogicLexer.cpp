
// Generated from /home/andersonjwan/Projects/forek/build/antlr/grammars/MetricTemporalLogicLexer.g4 by ANTLR 4.11.1


#include "MetricTemporalLogicLexer.h"


using namespace antlr4;

using namespace gen;


using namespace antlr4;

namespace {

struct MetricTemporalLogicLexerStaticData final {
  MetricTemporalLogicLexerStaticData(std::vector<std::string> ruleNames,
                          std::vector<std::string> channelNames,
                          std::vector<std::string> modeNames,
                          std::vector<std::string> literalNames,
                          std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), channelNames(std::move(channelNames)),
        modeNames(std::move(modeNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  MetricTemporalLogicLexerStaticData(const MetricTemporalLogicLexerStaticData&) = delete;
  MetricTemporalLogicLexerStaticData(MetricTemporalLogicLexerStaticData&&) = delete;
  MetricTemporalLogicLexerStaticData& operator=(const MetricTemporalLogicLexerStaticData&) = delete;
  MetricTemporalLogicLexerStaticData& operator=(MetricTemporalLogicLexerStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> channelNames;
  const std::vector<std::string> modeNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag metrictemporallogiclexerLexerOnceFlag;
MetricTemporalLogicLexerStaticData *metrictemporallogiclexerLexerStaticData = nullptr;

void metrictemporallogiclexerLexerInitialize() {
  assert(metrictemporallogiclexerLexerStaticData == nullptr);
  auto staticData = std::make_unique<MetricTemporalLogicLexerStaticData>(
    std::vector<std::string>{
      "OnceOperator", "HistoricallyOperator", "PreviousOperator", "SinceOperator", 
      "TriggerOperator", "EventuallyOperator", "AlwaysOperator", "NextOperator", 
      "UntilOperator", "ReleaseOperator", "NegationOperator", "ConjunctionOperator", 
      "DisjunctionOperator", "ImplicationOperator", "IffOperator", "True", 
      "False", "AT", "AMPERSAND", "APOSTROPHE", "ASTERICK", "BAR", "CARET", 
      "COLON", "Comma", "DOLLARSIGN", "DOT", "EQUAL", "EXCLAMATIONMARK", 
      "GRAVEACCENT", "HASH", "MINUS", "PERCENTSIGN", "PLUS", "QUESTIONMARK", 
      "QUOTATIONMARK", "SEMICOLON", "TILDE", "UNDERSCORE", "SLASH", "BACKSLASH", 
      "LeftBrace", "RightBrace", "LeftBracket", "RightBracket", "LeftChevron", 
      "RightChevron", "LeftParenthesis", "RightParenthesis", "BlockComment", 
      "LineComment", "Infinity", "Scalar", "Integer", "DecimalInteger", 
      "BinaryInteger", "OctalInteger", "HexInteger", "Floating", "PointFloat", 
      "ExponentFloat", "Identifier", "LETTER", "NONDIGIT", "BINDIGIT", "HEXDIGIT", 
      "OCTALDIGIT", "FRACTION", "EXPONENT", "NONZERODIGIT", "DIGIT", "Whitespace"
    },
    std::vector<std::string>{
      "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    },
    std::vector<std::string>{
      "DEFAULT_MODE"
    },
    std::vector<std::string>{
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "'true'", 
      "'false'", "','", "'{'", "'}'", "'['", "']'", "'<'", "'>'", "'('", 
      "')'", "", "", "'inf'"
    },
    std::vector<std::string>{
      "", "OnceOperator", "HistoricallyOperator", "PreviousOperator", "SinceOperator", 
      "TriggerOperator", "EventuallyOperator", "AlwaysOperator", "NextOperator", 
      "UntilOperator", "ReleaseOperator", "NegationOperator", "ConjunctionOperator", 
      "DisjunctionOperator", "ImplicationOperator", "IffOperator", "True", 
      "False", "Comma", "LeftBrace", "RightBrace", "LeftBracket", "RightBracket", 
      "LeftChevron", "RightChevron", "LeftParenthesis", "RightParenthesis", 
      "BlockComment", "LineComment", "Infinity", "Scalar", "Integer", "DecimalInteger", 
      "BinaryInteger", "OctalInteger", "HexInteger", "Floating", "PointFloat", 
      "ExponentFloat", "Identifier", "Whitespace"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,0,40,516,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
  	6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
  	7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,
  	7,70,2,71,7,71,1,0,1,0,1,0,1,0,1,0,3,0,151,8,0,1,1,1,1,1,1,1,1,1,1,1,
  	1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,166,8,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
  	1,2,1,2,3,2,177,8,2,1,3,1,3,1,3,1,3,1,3,1,3,3,3,185,8,3,1,4,1,4,1,4,1,
  	4,1,4,1,4,1,4,1,4,3,4,195,8,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,
  	1,5,3,5,208,8,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,3,6,217,8,6,1,7,1,7,1,7,1,
  	7,1,7,3,7,224,8,7,1,8,1,8,1,8,1,8,1,8,1,8,3,8,232,8,8,1,9,1,9,1,9,1,9,
  	1,9,1,9,1,9,1,9,3,9,242,8,9,1,10,1,10,1,10,1,10,3,10,248,8,10,1,11,1,
  	11,1,11,1,11,1,11,3,11,255,8,11,1,12,1,12,1,12,1,12,3,12,261,8,12,1,13,
  	1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,3,13,272,8,13,1,14,1,14,1,14,
  	1,14,1,14,1,14,3,14,280,8,14,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,
  	1,16,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,22,
  	1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,28,1,29,
  	1,29,1,30,1,30,1,31,1,31,1,32,1,32,1,33,1,33,1,34,1,34,1,35,1,35,1,36,
  	1,36,1,37,1,37,1,38,1,38,1,39,1,39,1,40,1,40,1,41,1,41,1,42,1,42,1,43,
  	1,43,1,44,1,44,1,45,1,45,1,46,1,46,1,47,1,47,1,48,1,48,1,49,1,49,1,49,
  	1,49,5,49,361,8,49,10,49,12,49,364,9,49,1,49,1,49,1,49,1,49,1,49,1,50,
  	1,50,1,50,1,50,5,50,375,8,50,10,50,12,50,378,9,50,1,50,3,50,381,8,50,
  	1,50,1,50,1,50,1,50,1,51,1,51,1,51,1,51,1,52,1,52,3,52,393,8,52,1,53,
  	1,53,1,53,1,53,3,53,399,8,53,1,54,1,54,5,54,403,8,54,10,54,12,54,406,
  	9,54,1,54,4,54,409,8,54,11,54,12,54,410,3,54,413,8,54,1,55,1,55,1,55,
  	4,55,418,8,55,11,55,12,55,419,1,56,1,56,1,56,4,56,425,8,56,11,56,12,56,
  	426,1,57,1,57,1,57,4,57,432,8,57,11,57,12,57,433,1,58,1,58,3,58,438,8,
  	58,1,59,4,59,441,8,59,11,59,12,59,442,3,59,445,8,59,1,59,1,59,4,59,449,
  	8,59,11,59,12,59,450,1,59,1,59,3,59,455,8,59,1,60,4,60,458,8,60,11,60,
  	12,60,459,1,60,3,60,463,8,60,1,60,1,60,1,61,4,61,468,8,61,11,61,12,61,
  	469,1,61,1,61,5,61,474,8,61,10,61,12,61,477,9,61,1,62,1,62,1,63,1,63,
  	3,63,483,8,63,1,64,1,64,1,65,1,65,1,66,1,66,1,67,1,67,4,67,493,8,67,11,
  	67,12,67,494,1,68,1,68,3,68,499,8,68,1,68,4,68,502,8,68,11,68,12,68,503,
  	1,69,1,69,1,70,1,70,1,71,4,71,511,8,71,11,71,12,71,512,1,71,1,71,2,362,
  	376,0,72,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,
  	13,27,14,29,15,31,16,33,17,35,0,37,0,39,0,41,0,43,0,45,0,47,0,49,18,51,
  	0,53,0,55,0,57,0,59,0,61,0,63,0,65,0,67,0,69,0,71,0,73,0,75,0,77,0,79,
  	0,81,0,83,19,85,20,87,21,89,22,91,23,93,24,95,25,97,26,99,27,101,28,103,
  	29,105,30,107,31,109,32,111,33,113,34,115,35,117,36,119,37,121,38,123,
  	39,125,0,127,0,129,0,131,0,133,0,135,0,137,0,139,0,141,0,143,40,1,0,12,
  	2,0,66,66,98,98,2,0,79,79,111,111,2,0,88,88,120,120,2,0,65,90,97,122,
  	1,0,48,49,3,0,48,57,65,70,97,102,1,0,48,55,2,0,69,69,101,101,2,0,43,43,
  	45,45,1,0,49,57,1,0,48,57,3,0,9,10,13,13,32,32,526,0,1,1,0,0,0,0,3,1,
  	0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,
  	15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,
  	0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,49,1,0,0,
  	0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,
  	93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,
  	1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,0,109,1,0,0,0,0,111,1,0,0,0,0,113,
  	1,0,0,0,0,115,1,0,0,0,0,117,1,0,0,0,0,119,1,0,0,0,0,121,1,0,0,0,0,123,
  	1,0,0,0,0,143,1,0,0,0,1,150,1,0,0,0,3,165,1,0,0,0,5,176,1,0,0,0,7,184,
  	1,0,0,0,9,194,1,0,0,0,11,207,1,0,0,0,13,216,1,0,0,0,15,223,1,0,0,0,17,
  	231,1,0,0,0,19,241,1,0,0,0,21,247,1,0,0,0,23,254,1,0,0,0,25,260,1,0,0,
  	0,27,271,1,0,0,0,29,279,1,0,0,0,31,281,1,0,0,0,33,286,1,0,0,0,35,292,
  	1,0,0,0,37,294,1,0,0,0,39,296,1,0,0,0,41,298,1,0,0,0,43,300,1,0,0,0,45,
  	302,1,0,0,0,47,304,1,0,0,0,49,306,1,0,0,0,51,308,1,0,0,0,53,310,1,0,0,
  	0,55,312,1,0,0,0,57,314,1,0,0,0,59,316,1,0,0,0,61,318,1,0,0,0,63,320,
  	1,0,0,0,65,322,1,0,0,0,67,324,1,0,0,0,69,326,1,0,0,0,71,328,1,0,0,0,73,
  	330,1,0,0,0,75,332,1,0,0,0,77,334,1,0,0,0,79,336,1,0,0,0,81,338,1,0,0,
  	0,83,340,1,0,0,0,85,342,1,0,0,0,87,344,1,0,0,0,89,346,1,0,0,0,91,348,
  	1,0,0,0,93,350,1,0,0,0,95,352,1,0,0,0,97,354,1,0,0,0,99,356,1,0,0,0,101,
  	370,1,0,0,0,103,386,1,0,0,0,105,392,1,0,0,0,107,398,1,0,0,0,109,412,1,
  	0,0,0,111,414,1,0,0,0,113,421,1,0,0,0,115,428,1,0,0,0,117,437,1,0,0,0,
  	119,454,1,0,0,0,121,462,1,0,0,0,123,467,1,0,0,0,125,478,1,0,0,0,127,482,
  	1,0,0,0,129,484,1,0,0,0,131,486,1,0,0,0,133,488,1,0,0,0,135,490,1,0,0,
  	0,137,496,1,0,0,0,139,505,1,0,0,0,141,507,1,0,0,0,143,510,1,0,0,0,145,
  	151,5,79,0,0,146,147,5,111,0,0,147,148,5,110,0,0,148,149,5,99,0,0,149,
  	151,5,101,0,0,150,145,1,0,0,0,150,146,1,0,0,0,151,2,1,0,0,0,152,166,5,
  	72,0,0,153,154,5,104,0,0,154,155,5,105,0,0,155,156,5,115,0,0,156,157,
  	5,116,0,0,157,158,5,111,0,0,158,159,5,114,0,0,159,160,5,105,0,0,160,161,
  	5,99,0,0,161,162,5,97,0,0,162,163,5,108,0,0,163,164,5,108,0,0,164,166,
  	5,121,0,0,165,152,1,0,0,0,165,153,1,0,0,0,166,4,1,0,0,0,167,177,5,80,
  	0,0,168,169,5,112,0,0,169,170,5,114,0,0,170,171,5,101,0,0,171,172,5,118,
  	0,0,172,173,5,105,0,0,173,174,5,111,0,0,174,175,5,117,0,0,175,177,5,115,
  	0,0,176,167,1,0,0,0,176,168,1,0,0,0,177,6,1,0,0,0,178,185,5,83,0,0,179,
  	180,5,115,0,0,180,181,5,105,0,0,181,182,5,110,0,0,182,183,5,99,0,0,183,
  	185,5,101,0,0,184,178,1,0,0,0,184,179,1,0,0,0,185,8,1,0,0,0,186,195,5,
  	84,0,0,187,188,5,116,0,0,188,189,5,114,0,0,189,190,5,105,0,0,190,191,
  	5,103,0,0,191,192,5,103,0,0,192,193,5,101,0,0,193,195,5,114,0,0,194,186,
  	1,0,0,0,194,187,1,0,0,0,195,10,1,0,0,0,196,208,5,70,0,0,197,198,5,101,
  	0,0,198,199,5,118,0,0,199,200,5,101,0,0,200,201,5,110,0,0,201,202,5,116,
  	0,0,202,203,5,117,0,0,203,204,5,97,0,0,204,205,5,108,0,0,205,206,5,108,
  	0,0,206,208,5,121,0,0,207,196,1,0,0,0,207,197,1,0,0,0,208,12,1,0,0,0,
  	209,217,5,71,0,0,210,211,5,97,0,0,211,212,5,108,0,0,212,213,5,119,0,0,
  	213,214,5,97,0,0,214,215,5,121,0,0,215,217,5,115,0,0,216,209,1,0,0,0,
  	216,210,1,0,0,0,217,14,1,0,0,0,218,224,5,88,0,0,219,220,5,110,0,0,220,
  	221,5,101,0,0,221,222,5,120,0,0,222,224,5,116,0,0,223,218,1,0,0,0,223,
  	219,1,0,0,0,224,16,1,0,0,0,225,232,5,85,0,0,226,227,5,117,0,0,227,228,
  	5,110,0,0,228,229,5,116,0,0,229,230,5,105,0,0,230,232,5,108,0,0,231,225,
  	1,0,0,0,231,226,1,0,0,0,232,18,1,0,0,0,233,242,5,82,0,0,234,235,5,114,
  	0,0,235,236,5,101,0,0,236,237,5,108,0,0,237,238,5,101,0,0,238,239,5,97,
  	0,0,239,240,5,115,0,0,240,242,5,101,0,0,241,233,1,0,0,0,241,234,1,0,0,
  	0,242,20,1,0,0,0,243,248,3,57,28,0,244,245,5,110,0,0,245,246,5,111,0,
  	0,246,248,5,116,0,0,247,243,1,0,0,0,247,244,1,0,0,0,248,22,1,0,0,0,249,
  	250,5,38,0,0,250,255,5,38,0,0,251,252,5,97,0,0,252,253,5,110,0,0,253,
  	255,5,100,0,0,254,249,1,0,0,0,254,251,1,0,0,0,255,24,1,0,0,0,256,257,
  	5,124,0,0,257,261,5,124,0,0,258,259,5,111,0,0,259,261,5,114,0,0,260,256,
  	1,0,0,0,260,258,1,0,0,0,261,26,1,0,0,0,262,263,5,45,0,0,263,272,5,62,
  	0,0,264,265,5,105,0,0,265,266,5,109,0,0,266,267,5,112,0,0,267,268,5,108,
  	0,0,268,269,5,105,0,0,269,270,5,101,0,0,270,272,5,115,0,0,271,262,1,0,
  	0,0,271,264,1,0,0,0,272,28,1,0,0,0,273,274,5,60,0,0,274,275,5,45,0,0,
  	275,280,5,62,0,0,276,277,5,105,0,0,277,278,5,102,0,0,278,280,5,102,0,
  	0,279,273,1,0,0,0,279,276,1,0,0,0,280,30,1,0,0,0,281,282,5,116,0,0,282,
  	283,5,114,0,0,283,284,5,117,0,0,284,285,5,101,0,0,285,32,1,0,0,0,286,
  	287,5,102,0,0,287,288,5,97,0,0,288,289,5,108,0,0,289,290,5,115,0,0,290,
  	291,5,101,0,0,291,34,1,0,0,0,292,293,5,64,0,0,293,36,1,0,0,0,294,295,
  	5,38,0,0,295,38,1,0,0,0,296,297,5,39,0,0,297,40,1,0,0,0,298,299,5,42,
  	0,0,299,42,1,0,0,0,300,301,5,124,0,0,301,44,1,0,0,0,302,303,5,94,0,0,
  	303,46,1,0,0,0,304,305,5,58,0,0,305,48,1,0,0,0,306,307,5,44,0,0,307,50,
  	1,0,0,0,308,309,5,36,0,0,309,52,1,0,0,0,310,311,5,46,0,0,311,54,1,0,0,
  	0,312,313,5,61,0,0,313,56,1,0,0,0,314,315,5,33,0,0,315,58,1,0,0,0,316,
  	317,5,96,0,0,317,60,1,0,0,0,318,319,5,35,0,0,319,62,1,0,0,0,320,321,5,
  	45,0,0,321,64,1,0,0,0,322,323,5,37,0,0,323,66,1,0,0,0,324,325,5,43,0,
  	0,325,68,1,0,0,0,326,327,5,63,0,0,327,70,1,0,0,0,328,329,5,34,0,0,329,
  	72,1,0,0,0,330,331,5,59,0,0,331,74,1,0,0,0,332,333,5,126,0,0,333,76,1,
  	0,0,0,334,335,5,95,0,0,335,78,1,0,0,0,336,337,5,47,0,0,337,80,1,0,0,0,
  	338,339,5,92,0,0,339,82,1,0,0,0,340,341,5,123,0,0,341,84,1,0,0,0,342,
  	343,5,125,0,0,343,86,1,0,0,0,344,345,5,91,0,0,345,88,1,0,0,0,346,347,
  	5,93,0,0,347,90,1,0,0,0,348,349,5,60,0,0,349,92,1,0,0,0,350,351,5,62,
  	0,0,351,94,1,0,0,0,352,353,5,40,0,0,353,96,1,0,0,0,354,355,5,41,0,0,355,
  	98,1,0,0,0,356,357,5,47,0,0,357,358,5,42,0,0,358,362,1,0,0,0,359,361,
  	9,0,0,0,360,359,1,0,0,0,361,364,1,0,0,0,362,363,1,0,0,0,362,360,1,0,0,
  	0,363,365,1,0,0,0,364,362,1,0,0,0,365,366,5,42,0,0,366,367,5,47,0,0,367,
  	368,1,0,0,0,368,369,6,49,0,0,369,100,1,0,0,0,370,371,5,47,0,0,371,372,
  	5,47,0,0,372,376,1,0,0,0,373,375,9,0,0,0,374,373,1,0,0,0,375,378,1,0,
  	0,0,376,377,1,0,0,0,376,374,1,0,0,0,377,380,1,0,0,0,378,376,1,0,0,0,379,
  	381,5,13,0,0,380,379,1,0,0,0,380,381,1,0,0,0,381,382,1,0,0,0,382,383,
  	5,10,0,0,383,384,1,0,0,0,384,385,6,50,0,0,385,102,1,0,0,0,386,387,5,105,
  	0,0,387,388,5,110,0,0,388,389,5,102,0,0,389,104,1,0,0,0,390,393,3,107,
  	53,0,391,393,3,117,58,0,392,390,1,0,0,0,392,391,1,0,0,0,393,106,1,0,0,
  	0,394,399,3,109,54,0,395,399,3,111,55,0,396,399,3,113,56,0,397,399,3,
  	115,57,0,398,394,1,0,0,0,398,395,1,0,0,0,398,396,1,0,0,0,398,397,1,0,
  	0,0,399,108,1,0,0,0,400,404,3,139,69,0,401,403,3,141,70,0,402,401,1,0,
  	0,0,403,406,1,0,0,0,404,402,1,0,0,0,404,405,1,0,0,0,405,413,1,0,0,0,406,
  	404,1,0,0,0,407,409,5,48,0,0,408,407,1,0,0,0,409,410,1,0,0,0,410,408,
  	1,0,0,0,410,411,1,0,0,0,411,413,1,0,0,0,412,400,1,0,0,0,412,408,1,0,0,
  	0,413,110,1,0,0,0,414,415,5,48,0,0,415,417,7,0,0,0,416,418,3,129,64,0,
  	417,416,1,0,0,0,418,419,1,0,0,0,419,417,1,0,0,0,419,420,1,0,0,0,420,112,
  	1,0,0,0,421,422,5,48,0,0,422,424,7,1,0,0,423,425,3,133,66,0,424,423,1,
  	0,0,0,425,426,1,0,0,0,426,424,1,0,0,0,426,427,1,0,0,0,427,114,1,0,0,0,
  	428,429,5,48,0,0,429,431,7,2,0,0,430,432,3,131,65,0,431,430,1,0,0,0,432,
  	433,1,0,0,0,433,431,1,0,0,0,433,434,1,0,0,0,434,116,1,0,0,0,435,438,3,
  	119,59,0,436,438,3,121,60,0,437,435,1,0,0,0,437,436,1,0,0,0,438,118,1,
  	0,0,0,439,441,3,141,70,0,440,439,1,0,0,0,441,442,1,0,0,0,442,440,1,0,
  	0,0,442,443,1,0,0,0,443,445,1,0,0,0,444,440,1,0,0,0,444,445,1,0,0,0,445,
  	446,1,0,0,0,446,455,3,135,67,0,447,449,3,141,70,0,448,447,1,0,0,0,449,
  	450,1,0,0,0,450,448,1,0,0,0,450,451,1,0,0,0,451,452,1,0,0,0,452,453,5,
  	46,0,0,453,455,1,0,0,0,454,444,1,0,0,0,454,448,1,0,0,0,455,120,1,0,0,
  	0,456,458,3,141,70,0,457,456,1,0,0,0,458,459,1,0,0,0,459,457,1,0,0,0,
  	459,460,1,0,0,0,460,463,1,0,0,0,461,463,3,119,59,0,462,457,1,0,0,0,462,
  	461,1,0,0,0,463,464,1,0,0,0,464,465,3,137,68,0,465,122,1,0,0,0,466,468,
  	3,127,63,0,467,466,1,0,0,0,468,469,1,0,0,0,469,467,1,0,0,0,469,470,1,
  	0,0,0,470,475,1,0,0,0,471,474,3,127,63,0,472,474,3,141,70,0,473,471,1,
  	0,0,0,473,472,1,0,0,0,474,477,1,0,0,0,475,473,1,0,0,0,475,476,1,0,0,0,
  	476,124,1,0,0,0,477,475,1,0,0,0,478,479,7,3,0,0,479,126,1,0,0,0,480,483,
  	3,125,62,0,481,483,5,95,0,0,482,480,1,0,0,0,482,481,1,0,0,0,483,128,1,
  	0,0,0,484,485,7,4,0,0,485,130,1,0,0,0,486,487,7,5,0,0,487,132,1,0,0,0,
  	488,489,7,6,0,0,489,134,1,0,0,0,490,492,5,46,0,0,491,493,3,141,70,0,492,
  	491,1,0,0,0,493,494,1,0,0,0,494,492,1,0,0,0,494,495,1,0,0,0,495,136,1,
  	0,0,0,496,498,7,7,0,0,497,499,7,8,0,0,498,497,1,0,0,0,498,499,1,0,0,0,
  	499,501,1,0,0,0,500,502,3,141,70,0,501,500,1,0,0,0,502,503,1,0,0,0,503,
  	501,1,0,0,0,503,504,1,0,0,0,504,138,1,0,0,0,505,506,7,9,0,0,506,140,1,
  	0,0,0,507,508,7,10,0,0,508,142,1,0,0,0,509,511,7,11,0,0,510,509,1,0,0,
  	0,511,512,1,0,0,0,512,510,1,0,0,0,512,513,1,0,0,0,513,514,1,0,0,0,514,
  	515,6,71,0,0,515,144,1,0,0,0,42,0,150,165,176,184,194,207,216,223,231,
  	241,247,254,260,271,279,362,376,380,392,398,404,410,412,419,426,433,437,
  	442,444,450,454,459,462,469,473,475,482,494,498,503,512,1,6,0,0
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  metrictemporallogiclexerLexerStaticData = staticData.release();
}

}

MetricTemporalLogicLexer::MetricTemporalLogicLexer(CharStream *input) : Lexer(input) {
  MetricTemporalLogicLexer::initialize();
  _interpreter = new atn::LexerATNSimulator(this, *metrictemporallogiclexerLexerStaticData->atn, metrictemporallogiclexerLexerStaticData->decisionToDFA, metrictemporallogiclexerLexerStaticData->sharedContextCache);
}

MetricTemporalLogicLexer::~MetricTemporalLogicLexer() {
  delete _interpreter;
}

std::string MetricTemporalLogicLexer::getGrammarFileName() const {
  return "MetricTemporalLogicLexer.g4";
}

const std::vector<std::string>& MetricTemporalLogicLexer::getRuleNames() const {
  return metrictemporallogiclexerLexerStaticData->ruleNames;
}

const std::vector<std::string>& MetricTemporalLogicLexer::getChannelNames() const {
  return metrictemporallogiclexerLexerStaticData->channelNames;
}

const std::vector<std::string>& MetricTemporalLogicLexer::getModeNames() const {
  return metrictemporallogiclexerLexerStaticData->modeNames;
}

const dfa::Vocabulary& MetricTemporalLogicLexer::getVocabulary() const {
  return metrictemporallogiclexerLexerStaticData->vocabulary;
}

antlr4::atn::SerializedATNView MetricTemporalLogicLexer::getSerializedATN() const {
  return metrictemporallogiclexerLexerStaticData->serializedATN;
}

const atn::ATN& MetricTemporalLogicLexer::getATN() const {
  return *metrictemporallogiclexerLexerStaticData->atn;
}




void MetricTemporalLogicLexer::initialize() {
  ::antlr4::internal::call_once(metrictemporallogiclexerLexerOnceFlag, metrictemporallogiclexerLexerInitialize);
}
