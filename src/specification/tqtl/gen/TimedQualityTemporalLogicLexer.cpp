
// Generated from /home/andersonjwan/Projects/forek/build/antlr/grammars/TimedQualityTemporalLogicLexer.g4 by ANTLR 4.11.1


#include "TimedQualityTemporalLogicLexer.h"


using namespace antlr4;

using namespace gen;


using namespace antlr4;

namespace {

struct TimedQualityTemporalLogicLexerStaticData final {
  TimedQualityTemporalLogicLexerStaticData(std::vector<std::string> ruleNames,
                          std::vector<std::string> channelNames,
                          std::vector<std::string> modeNames,
                          std::vector<std::string> literalNames,
                          std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), channelNames(std::move(channelNames)),
        modeNames(std::move(modeNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  TimedQualityTemporalLogicLexerStaticData(const TimedQualityTemporalLogicLexerStaticData&) = delete;
  TimedQualityTemporalLogicLexerStaticData(TimedQualityTemporalLogicLexerStaticData&&) = delete;
  TimedQualityTemporalLogicLexerStaticData& operator=(const TimedQualityTemporalLogicLexerStaticData&) = delete;
  TimedQualityTemporalLogicLexerStaticData& operator=(TimedQualityTemporalLogicLexerStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> channelNames;
  const std::vector<std::string> modeNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag timedqualitytemporallogiclexerLexerOnceFlag;
TimedQualityTemporalLogicLexerStaticData *timedqualitytemporallogiclexerLexerStaticData = nullptr;

void timedqualitytemporallogiclexerLexerInitialize() {
  assert(timedqualitytemporallogiclexerLexerStaticData == nullptr);
  auto staticData = std::make_unique<TimedQualityTemporalLogicLexerStaticData>(
    std::vector<std::string>{
      "ExistsQuantifier", "ForallQuantifier", "FreezeTime", "LessThanOrEqualTo", 
      "GreaterThanOrEqualTo", "EqualTo", "NotEqualTo", "OnceOperator", "HistoricallyOperator", 
      "PreviousOperator", "SinceOperator", "TriggerOperator", "EventuallyOperator", 
      "AlwaysOperator", "NextOperator", "UntilOperator", "ReleaseOperator", 
      "NegationOperator", "ConjunctionOperator", "DisjunctionOperator", 
      "ImplicationOperator", "IffOperator", "True", "False", "AT", "AMPERSAND", 
      "APOSTROPHE", "ASTERICK", "BAR", "CARET", "COLON", "Comma", "DOLLARSIGN", 
      "DOT", "EQUAL", "EXCLAMATIONMARK", "GRAVEACCENT", "HASH", "MINUS", 
      "PERCENTSIGN", "PLUS", "QUESTIONMARK", "QUOTATIONMARK", "SEMICOLON", 
      "TILDE", "UNDERSCORE", "SLASH", "BACKSLASH", "LeftBrace", "RightBrace", 
      "LeftBracket", "RightBracket", "LeftChevron", "RightChevron", "LeftParenthesis", 
      "RightParenthesis", "BlockComment", "LineComment", "Infinity", "Scalar", 
      "Integer", "DecimalInteger", "BinaryInteger", "OctalInteger", "HexInteger", 
      "Floating", "PointFloat", "ExponentFloat", "Identifier", "LETTER", 
      "NONDIGIT", "BINDIGIT", "HEXDIGIT", "OCTALDIGIT", "FRACTION", "EXPONENT", 
      "NONZERODIGIT", "DIGIT", "Whitespace", "AdditionOperator", "SubtractionOperator", 
      "MultiplicationOperator", "DivisionOperator", "ModuloOperator"
    },
    std::vector<std::string>{
      "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    },
    std::vector<std::string>{
      "DEFAULT_MODE"
    },
    std::vector<std::string>{
      "", "", "", "", "'<='", "'>='", "'=='", "'!='", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "'true'", "'false'", "','", 
      "'{'", "'}'", "'['", "']'", "'<'", "'>'", "'('", "')'", "", "", "'inf'"
    },
    std::vector<std::string>{
      "", "ExistsQuantifier", "ForallQuantifier", "FreezeTime", "LessThanOrEqualTo", 
      "GreaterThanOrEqualTo", "EqualTo", "NotEqualTo", "OnceOperator", "HistoricallyOperator", 
      "PreviousOperator", "SinceOperator", "TriggerOperator", "EventuallyOperator", 
      "AlwaysOperator", "NextOperator", "UntilOperator", "ReleaseOperator", 
      "NegationOperator", "ConjunctionOperator", "DisjunctionOperator", 
      "ImplicationOperator", "IffOperator", "True", "False", "Comma", "LeftBrace", 
      "RightBrace", "LeftBracket", "RightBracket", "LeftChevron", "RightChevron", 
      "LeftParenthesis", "RightParenthesis", "BlockComment", "LineComment", 
      "Infinity", "Scalar", "Integer", "DecimalInteger", "BinaryInteger", 
      "OctalInteger", "HexInteger", "Floating", "PointFloat", "ExponentFloat", 
      "Identifier", "Whitespace", "AdditionOperator", "SubtractionOperator", 
      "MultiplicationOperator", "DivisionOperator", "ModuloOperator"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,0,52,585,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
  	6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
  	7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,
  	7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,
  	7,77,2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,1,0,
  	1,0,1,0,1,0,1,0,1,0,1,0,3,0,177,8,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,186,
  	8,1,1,2,1,2,1,2,3,2,191,8,2,1,3,1,3,1,3,1,4,1,4,1,4,1,5,1,5,1,5,1,6,1,
  	6,1,6,1,7,1,7,1,7,1,7,1,7,3,7,210,8,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,
  	1,8,1,8,1,8,1,8,1,8,3,8,225,8,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,3,
  	9,236,8,9,1,10,1,10,1,10,1,10,1,10,1,10,3,10,244,8,10,1,11,1,11,1,11,
  	1,11,1,11,1,11,1,11,1,11,3,11,254,8,11,1,12,1,12,1,12,1,12,1,12,1,12,
  	1,12,1,12,1,12,1,12,1,12,3,12,267,8,12,1,13,1,13,1,13,1,13,1,13,1,13,
  	1,13,3,13,276,8,13,1,14,1,14,1,14,1,14,1,14,3,14,283,8,14,1,15,1,15,1,
  	15,1,15,1,15,1,15,3,15,291,8,15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,
  	16,3,16,301,8,16,1,17,1,17,1,17,1,17,3,17,307,8,17,1,18,1,18,1,18,1,18,
  	1,18,3,18,314,8,18,1,19,1,19,1,19,1,19,3,19,320,8,19,1,20,1,20,1,20,1,
  	20,1,20,1,20,1,20,1,20,1,20,3,20,331,8,20,1,21,1,21,1,21,1,21,1,21,1,
  	21,3,21,339,8,21,1,22,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,
  	23,1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,28,1,29,1,29,1,30,1,
  	30,1,31,1,31,1,32,1,32,1,33,1,33,1,34,1,34,1,35,1,35,1,36,1,36,1,37,1,
  	37,1,38,1,38,1,39,1,39,1,40,1,40,1,41,1,41,1,42,1,42,1,43,1,43,1,44,1,
  	44,1,45,1,45,1,46,1,46,1,47,1,47,1,48,1,48,1,49,1,49,1,50,1,50,1,51,1,
  	51,1,52,1,52,1,53,1,53,1,54,1,54,1,55,1,55,1,56,1,56,1,56,1,56,5,56,420,
  	8,56,10,56,12,56,423,9,56,1,56,1,56,1,56,1,56,1,56,1,57,1,57,1,57,1,57,
  	5,57,434,8,57,10,57,12,57,437,9,57,1,57,3,57,440,8,57,1,57,1,57,1,57,
  	1,57,1,58,1,58,1,58,1,58,1,59,1,59,3,59,452,8,59,1,60,1,60,1,60,1,60,
  	3,60,458,8,60,1,61,1,61,5,61,462,8,61,10,61,12,61,465,9,61,1,61,4,61,
  	468,8,61,11,61,12,61,469,3,61,472,8,61,1,62,1,62,1,62,4,62,477,8,62,11,
  	62,12,62,478,1,63,1,63,1,63,4,63,484,8,63,11,63,12,63,485,1,64,1,64,1,
  	64,4,64,491,8,64,11,64,12,64,492,1,65,1,65,3,65,497,8,65,1,66,4,66,500,
  	8,66,11,66,12,66,501,3,66,504,8,66,1,66,1,66,4,66,508,8,66,11,66,12,66,
  	509,1,66,1,66,3,66,514,8,66,1,67,4,67,517,8,67,11,67,12,67,518,1,67,3,
  	67,522,8,67,1,67,1,67,1,68,4,68,527,8,68,11,68,12,68,528,1,68,1,68,5,
  	68,533,8,68,10,68,12,68,536,9,68,1,69,1,69,1,70,1,70,3,70,542,8,70,1,
  	71,1,71,1,72,1,72,1,73,1,73,1,74,1,74,4,74,552,8,74,11,74,12,74,553,1,
  	75,1,75,3,75,558,8,75,1,75,4,75,561,8,75,11,75,12,75,562,1,76,1,76,1,
  	77,1,77,1,78,4,78,570,8,78,11,78,12,78,571,1,78,1,78,1,79,1,79,1,80,1,
  	80,1,81,1,81,1,82,1,82,1,83,1,83,2,421,435,0,84,1,1,3,2,5,3,7,4,9,5,11,
  	6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,
  	37,19,39,20,41,21,43,22,45,23,47,24,49,0,51,0,53,0,55,0,57,0,59,0,61,
  	0,63,25,65,0,67,0,69,0,71,0,73,0,75,0,77,0,79,0,81,0,83,0,85,0,87,0,89,
  	0,91,0,93,0,95,0,97,26,99,27,101,28,103,29,105,30,107,31,109,32,111,33,
  	113,34,115,35,117,36,119,37,121,38,123,39,125,40,127,41,129,42,131,43,
  	133,44,135,45,137,46,139,0,141,0,143,0,145,0,147,0,149,0,151,0,153,0,
  	155,0,157,47,159,48,161,49,163,50,165,51,167,52,1,0,12,2,0,66,66,98,98,
  	2,0,79,79,111,111,2,0,88,88,120,120,2,0,65,90,97,122,1,0,48,49,3,0,48,
  	57,65,70,97,102,1,0,48,55,2,0,69,69,101,101,2,0,43,43,45,45,1,0,49,57,
  	1,0,48,57,3,0,9,10,13,13,32,32,598,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,
  	0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,
  	1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,
  	0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,
  	0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,63,
  	1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,
  	0,0,0,0,107,1,0,0,0,0,109,1,0,0,0,0,111,1,0,0,0,0,113,1,0,0,0,0,115,1,
  	0,0,0,0,117,1,0,0,0,0,119,1,0,0,0,0,121,1,0,0,0,0,123,1,0,0,0,0,125,1,
  	0,0,0,0,127,1,0,0,0,0,129,1,0,0,0,0,131,1,0,0,0,0,133,1,0,0,0,0,135,1,
  	0,0,0,0,137,1,0,0,0,0,157,1,0,0,0,0,159,1,0,0,0,0,161,1,0,0,0,0,163,1,
  	0,0,0,0,165,1,0,0,0,0,167,1,0,0,0,1,176,1,0,0,0,3,185,1,0,0,0,5,190,1,
  	0,0,0,7,192,1,0,0,0,9,195,1,0,0,0,11,198,1,0,0,0,13,201,1,0,0,0,15,209,
  	1,0,0,0,17,224,1,0,0,0,19,235,1,0,0,0,21,243,1,0,0,0,23,253,1,0,0,0,25,
  	266,1,0,0,0,27,275,1,0,0,0,29,282,1,0,0,0,31,290,1,0,0,0,33,300,1,0,0,
  	0,35,306,1,0,0,0,37,313,1,0,0,0,39,319,1,0,0,0,41,330,1,0,0,0,43,338,
  	1,0,0,0,45,340,1,0,0,0,47,345,1,0,0,0,49,351,1,0,0,0,51,353,1,0,0,0,53,
  	355,1,0,0,0,55,357,1,0,0,0,57,359,1,0,0,0,59,361,1,0,0,0,61,363,1,0,0,
  	0,63,365,1,0,0,0,65,367,1,0,0,0,67,369,1,0,0,0,69,371,1,0,0,0,71,373,
  	1,0,0,0,73,375,1,0,0,0,75,377,1,0,0,0,77,379,1,0,0,0,79,381,1,0,0,0,81,
  	383,1,0,0,0,83,385,1,0,0,0,85,387,1,0,0,0,87,389,1,0,0,0,89,391,1,0,0,
  	0,91,393,1,0,0,0,93,395,1,0,0,0,95,397,1,0,0,0,97,399,1,0,0,0,99,401,
  	1,0,0,0,101,403,1,0,0,0,103,405,1,0,0,0,105,407,1,0,0,0,107,409,1,0,0,
  	0,109,411,1,0,0,0,111,413,1,0,0,0,113,415,1,0,0,0,115,429,1,0,0,0,117,
  	445,1,0,0,0,119,451,1,0,0,0,121,457,1,0,0,0,123,471,1,0,0,0,125,473,1,
  	0,0,0,127,480,1,0,0,0,129,487,1,0,0,0,131,496,1,0,0,0,133,513,1,0,0,0,
  	135,521,1,0,0,0,137,526,1,0,0,0,139,537,1,0,0,0,141,541,1,0,0,0,143,543,
  	1,0,0,0,145,545,1,0,0,0,147,547,1,0,0,0,149,549,1,0,0,0,151,555,1,0,0,
  	0,153,564,1,0,0,0,155,566,1,0,0,0,157,569,1,0,0,0,159,575,1,0,0,0,161,
  	577,1,0,0,0,163,579,1,0,0,0,165,581,1,0,0,0,167,583,1,0,0,0,169,177,5,
  	69,0,0,170,171,5,101,0,0,171,172,5,120,0,0,172,173,5,105,0,0,173,174,
  	5,115,0,0,174,175,5,116,0,0,175,177,5,115,0,0,176,169,1,0,0,0,176,170,
  	1,0,0,0,177,2,1,0,0,0,178,186,5,65,0,0,179,180,5,102,0,0,180,181,5,111,
  	0,0,181,182,5,114,0,0,182,183,5,97,0,0,183,184,5,108,0,0,184,186,5,108,
  	0,0,185,178,1,0,0,0,185,179,1,0,0,0,186,4,1,0,0,0,187,191,3,49,24,0,188,
  	189,5,97,0,0,189,191,5,116,0,0,190,187,1,0,0,0,190,188,1,0,0,0,191,6,
  	1,0,0,0,192,193,5,60,0,0,193,194,5,61,0,0,194,8,1,0,0,0,195,196,5,62,
  	0,0,196,197,5,61,0,0,197,10,1,0,0,0,198,199,5,61,0,0,199,200,5,61,0,0,
  	200,12,1,0,0,0,201,202,5,33,0,0,202,203,5,61,0,0,203,14,1,0,0,0,204,210,
  	5,79,0,0,205,206,5,111,0,0,206,207,5,110,0,0,207,208,5,99,0,0,208,210,
  	5,101,0,0,209,204,1,0,0,0,209,205,1,0,0,0,210,16,1,0,0,0,211,225,5,72,
  	0,0,212,213,5,104,0,0,213,214,5,105,0,0,214,215,5,115,0,0,215,216,5,116,
  	0,0,216,217,5,111,0,0,217,218,5,114,0,0,218,219,5,105,0,0,219,220,5,99,
  	0,0,220,221,5,97,0,0,221,222,5,108,0,0,222,223,5,108,0,0,223,225,5,121,
  	0,0,224,211,1,0,0,0,224,212,1,0,0,0,225,18,1,0,0,0,226,236,5,80,0,0,227,
  	228,5,112,0,0,228,229,5,114,0,0,229,230,5,101,0,0,230,231,5,118,0,0,231,
  	232,5,105,0,0,232,233,5,111,0,0,233,234,5,117,0,0,234,236,5,115,0,0,235,
  	226,1,0,0,0,235,227,1,0,0,0,236,20,1,0,0,0,237,244,5,83,0,0,238,239,5,
  	115,0,0,239,240,5,105,0,0,240,241,5,110,0,0,241,242,5,99,0,0,242,244,
  	5,101,0,0,243,237,1,0,0,0,243,238,1,0,0,0,244,22,1,0,0,0,245,254,5,84,
  	0,0,246,247,5,116,0,0,247,248,5,114,0,0,248,249,5,105,0,0,249,250,5,103,
  	0,0,250,251,5,103,0,0,251,252,5,101,0,0,252,254,5,114,0,0,253,245,1,0,
  	0,0,253,246,1,0,0,0,254,24,1,0,0,0,255,267,5,70,0,0,256,257,5,101,0,0,
  	257,258,5,118,0,0,258,259,5,101,0,0,259,260,5,110,0,0,260,261,5,116,0,
  	0,261,262,5,117,0,0,262,263,5,97,0,0,263,264,5,108,0,0,264,265,5,108,
  	0,0,265,267,5,121,0,0,266,255,1,0,0,0,266,256,1,0,0,0,267,26,1,0,0,0,
  	268,276,5,71,0,0,269,270,5,97,0,0,270,271,5,108,0,0,271,272,5,119,0,0,
  	272,273,5,97,0,0,273,274,5,121,0,0,274,276,5,115,0,0,275,268,1,0,0,0,
  	275,269,1,0,0,0,276,28,1,0,0,0,277,283,5,88,0,0,278,279,5,110,0,0,279,
  	280,5,101,0,0,280,281,5,120,0,0,281,283,5,116,0,0,282,277,1,0,0,0,282,
  	278,1,0,0,0,283,30,1,0,0,0,284,291,5,85,0,0,285,286,5,117,0,0,286,287,
  	5,110,0,0,287,288,5,116,0,0,288,289,5,105,0,0,289,291,5,108,0,0,290,284,
  	1,0,0,0,290,285,1,0,0,0,291,32,1,0,0,0,292,301,5,82,0,0,293,294,5,114,
  	0,0,294,295,5,101,0,0,295,296,5,108,0,0,296,297,5,101,0,0,297,298,5,97,
  	0,0,298,299,5,115,0,0,299,301,5,101,0,0,300,292,1,0,0,0,300,293,1,0,0,
  	0,301,34,1,0,0,0,302,307,3,71,35,0,303,304,5,110,0,0,304,305,5,111,0,
  	0,305,307,5,116,0,0,306,302,1,0,0,0,306,303,1,0,0,0,307,36,1,0,0,0,308,
  	309,5,38,0,0,309,314,5,38,0,0,310,311,5,97,0,0,311,312,5,110,0,0,312,
  	314,5,100,0,0,313,308,1,0,0,0,313,310,1,0,0,0,314,38,1,0,0,0,315,316,
  	5,124,0,0,316,320,5,124,0,0,317,318,5,111,0,0,318,320,5,114,0,0,319,315,
  	1,0,0,0,319,317,1,0,0,0,320,40,1,0,0,0,321,322,5,45,0,0,322,331,5,62,
  	0,0,323,324,5,105,0,0,324,325,5,109,0,0,325,326,5,112,0,0,326,327,5,108,
  	0,0,327,328,5,105,0,0,328,329,5,101,0,0,329,331,5,115,0,0,330,321,1,0,
  	0,0,330,323,1,0,0,0,331,42,1,0,0,0,332,333,5,60,0,0,333,334,5,45,0,0,
  	334,339,5,62,0,0,335,336,5,105,0,0,336,337,5,102,0,0,337,339,5,102,0,
  	0,338,332,1,0,0,0,338,335,1,0,0,0,339,44,1,0,0,0,340,341,5,116,0,0,341,
  	342,5,114,0,0,342,343,5,117,0,0,343,344,5,101,0,0,344,46,1,0,0,0,345,
  	346,5,102,0,0,346,347,5,97,0,0,347,348,5,108,0,0,348,349,5,115,0,0,349,
  	350,5,101,0,0,350,48,1,0,0,0,351,352,5,64,0,0,352,50,1,0,0,0,353,354,
  	5,38,0,0,354,52,1,0,0,0,355,356,5,39,0,0,356,54,1,0,0,0,357,358,5,42,
  	0,0,358,56,1,0,0,0,359,360,5,124,0,0,360,58,1,0,0,0,361,362,5,94,0,0,
  	362,60,1,0,0,0,363,364,5,58,0,0,364,62,1,0,0,0,365,366,5,44,0,0,366,64,
  	1,0,0,0,367,368,5,36,0,0,368,66,1,0,0,0,369,370,5,46,0,0,370,68,1,0,0,
  	0,371,372,5,61,0,0,372,70,1,0,0,0,373,374,5,33,0,0,374,72,1,0,0,0,375,
  	376,5,96,0,0,376,74,1,0,0,0,377,378,5,35,0,0,378,76,1,0,0,0,379,380,5,
  	45,0,0,380,78,1,0,0,0,381,382,5,37,0,0,382,80,1,0,0,0,383,384,5,43,0,
  	0,384,82,1,0,0,0,385,386,5,63,0,0,386,84,1,0,0,0,387,388,5,34,0,0,388,
  	86,1,0,0,0,389,390,5,59,0,0,390,88,1,0,0,0,391,392,5,126,0,0,392,90,1,
  	0,0,0,393,394,5,95,0,0,394,92,1,0,0,0,395,396,5,47,0,0,396,94,1,0,0,0,
  	397,398,5,92,0,0,398,96,1,0,0,0,399,400,5,123,0,0,400,98,1,0,0,0,401,
  	402,5,125,0,0,402,100,1,0,0,0,403,404,5,91,0,0,404,102,1,0,0,0,405,406,
  	5,93,0,0,406,104,1,0,0,0,407,408,5,60,0,0,408,106,1,0,0,0,409,410,5,62,
  	0,0,410,108,1,0,0,0,411,412,5,40,0,0,412,110,1,0,0,0,413,414,5,41,0,0,
  	414,112,1,0,0,0,415,416,5,47,0,0,416,417,5,42,0,0,417,421,1,0,0,0,418,
  	420,9,0,0,0,419,418,1,0,0,0,420,423,1,0,0,0,421,422,1,0,0,0,421,419,1,
  	0,0,0,422,424,1,0,0,0,423,421,1,0,0,0,424,425,5,42,0,0,425,426,5,47,0,
  	0,426,427,1,0,0,0,427,428,6,56,0,0,428,114,1,0,0,0,429,430,5,47,0,0,430,
  	431,5,47,0,0,431,435,1,0,0,0,432,434,9,0,0,0,433,432,1,0,0,0,434,437,
  	1,0,0,0,435,436,1,0,0,0,435,433,1,0,0,0,436,439,1,0,0,0,437,435,1,0,0,
  	0,438,440,5,13,0,0,439,438,1,0,0,0,439,440,1,0,0,0,440,441,1,0,0,0,441,
  	442,5,10,0,0,442,443,1,0,0,0,443,444,6,57,0,0,444,116,1,0,0,0,445,446,
  	5,105,0,0,446,447,5,110,0,0,447,448,5,102,0,0,448,118,1,0,0,0,449,452,
  	3,121,60,0,450,452,3,131,65,0,451,449,1,0,0,0,451,450,1,0,0,0,452,120,
  	1,0,0,0,453,458,3,123,61,0,454,458,3,125,62,0,455,458,3,127,63,0,456,
  	458,3,129,64,0,457,453,1,0,0,0,457,454,1,0,0,0,457,455,1,0,0,0,457,456,
  	1,0,0,0,458,122,1,0,0,0,459,463,3,153,76,0,460,462,3,155,77,0,461,460,
  	1,0,0,0,462,465,1,0,0,0,463,461,1,0,0,0,463,464,1,0,0,0,464,472,1,0,0,
  	0,465,463,1,0,0,0,466,468,5,48,0,0,467,466,1,0,0,0,468,469,1,0,0,0,469,
  	467,1,0,0,0,469,470,1,0,0,0,470,472,1,0,0,0,471,459,1,0,0,0,471,467,1,
  	0,0,0,472,124,1,0,0,0,473,474,5,48,0,0,474,476,7,0,0,0,475,477,3,143,
  	71,0,476,475,1,0,0,0,477,478,1,0,0,0,478,476,1,0,0,0,478,479,1,0,0,0,
  	479,126,1,0,0,0,480,481,5,48,0,0,481,483,7,1,0,0,482,484,3,147,73,0,483,
  	482,1,0,0,0,484,485,1,0,0,0,485,483,1,0,0,0,485,486,1,0,0,0,486,128,1,
  	0,0,0,487,488,5,48,0,0,488,490,7,2,0,0,489,491,3,145,72,0,490,489,1,0,
  	0,0,491,492,1,0,0,0,492,490,1,0,0,0,492,493,1,0,0,0,493,130,1,0,0,0,494,
  	497,3,133,66,0,495,497,3,135,67,0,496,494,1,0,0,0,496,495,1,0,0,0,497,
  	132,1,0,0,0,498,500,3,155,77,0,499,498,1,0,0,0,500,501,1,0,0,0,501,499,
  	1,0,0,0,501,502,1,0,0,0,502,504,1,0,0,0,503,499,1,0,0,0,503,504,1,0,0,
  	0,504,505,1,0,0,0,505,514,3,149,74,0,506,508,3,155,77,0,507,506,1,0,0,
  	0,508,509,1,0,0,0,509,507,1,0,0,0,509,510,1,0,0,0,510,511,1,0,0,0,511,
  	512,5,46,0,0,512,514,1,0,0,0,513,503,1,0,0,0,513,507,1,0,0,0,514,134,
  	1,0,0,0,515,517,3,155,77,0,516,515,1,0,0,0,517,518,1,0,0,0,518,516,1,
  	0,0,0,518,519,1,0,0,0,519,522,1,0,0,0,520,522,3,133,66,0,521,516,1,0,
  	0,0,521,520,1,0,0,0,522,523,1,0,0,0,523,524,3,151,75,0,524,136,1,0,0,
  	0,525,527,3,141,70,0,526,525,1,0,0,0,527,528,1,0,0,0,528,526,1,0,0,0,
  	528,529,1,0,0,0,529,534,1,0,0,0,530,533,3,141,70,0,531,533,3,155,77,0,
  	532,530,1,0,0,0,532,531,1,0,0,0,533,536,1,0,0,0,534,532,1,0,0,0,534,535,
  	1,0,0,0,535,138,1,0,0,0,536,534,1,0,0,0,537,538,7,3,0,0,538,140,1,0,0,
  	0,539,542,3,139,69,0,540,542,5,95,0,0,541,539,1,0,0,0,541,540,1,0,0,0,
  	542,142,1,0,0,0,543,544,7,4,0,0,544,144,1,0,0,0,545,546,7,5,0,0,546,146,
  	1,0,0,0,547,548,7,6,0,0,548,148,1,0,0,0,549,551,5,46,0,0,550,552,3,155,
  	77,0,551,550,1,0,0,0,552,553,1,0,0,0,553,551,1,0,0,0,553,554,1,0,0,0,
  	554,150,1,0,0,0,555,557,7,7,0,0,556,558,7,8,0,0,557,556,1,0,0,0,557,558,
  	1,0,0,0,558,560,1,0,0,0,559,561,3,155,77,0,560,559,1,0,0,0,561,562,1,
  	0,0,0,562,560,1,0,0,0,562,563,1,0,0,0,563,152,1,0,0,0,564,565,7,9,0,0,
  	565,154,1,0,0,0,566,567,7,10,0,0,567,156,1,0,0,0,568,570,7,11,0,0,569,
  	568,1,0,0,0,570,571,1,0,0,0,571,569,1,0,0,0,571,572,1,0,0,0,572,573,1,
  	0,0,0,573,574,6,78,0,0,574,158,1,0,0,0,575,576,3,81,40,0,576,160,1,0,
  	0,0,577,578,3,77,38,0,578,162,1,0,0,0,579,580,3,55,27,0,580,164,1,0,0,
  	0,581,582,3,93,46,0,582,166,1,0,0,0,583,584,3,79,39,0,584,168,1,0,0,0,
  	45,0,176,185,190,209,224,235,243,253,266,275,282,290,300,306,313,319,
  	330,338,421,435,439,451,457,463,469,471,478,485,492,496,501,503,509,513,
  	518,521,528,532,534,541,553,557,562,571,1,6,0,0
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  timedqualitytemporallogiclexerLexerStaticData = staticData.release();
}

}

TimedQualityTemporalLogicLexer::TimedQualityTemporalLogicLexer(CharStream *input) : Lexer(input) {
  TimedQualityTemporalLogicLexer::initialize();
  _interpreter = new atn::LexerATNSimulator(this, *timedqualitytemporallogiclexerLexerStaticData->atn, timedqualitytemporallogiclexerLexerStaticData->decisionToDFA, timedqualitytemporallogiclexerLexerStaticData->sharedContextCache);
}

TimedQualityTemporalLogicLexer::~TimedQualityTemporalLogicLexer() {
  delete _interpreter;
}

std::string TimedQualityTemporalLogicLexer::getGrammarFileName() const {
  return "TimedQualityTemporalLogicLexer.g4";
}

const std::vector<std::string>& TimedQualityTemporalLogicLexer::getRuleNames() const {
  return timedqualitytemporallogiclexerLexerStaticData->ruleNames;
}

const std::vector<std::string>& TimedQualityTemporalLogicLexer::getChannelNames() const {
  return timedqualitytemporallogiclexerLexerStaticData->channelNames;
}

const std::vector<std::string>& TimedQualityTemporalLogicLexer::getModeNames() const {
  return timedqualitytemporallogiclexerLexerStaticData->modeNames;
}

const dfa::Vocabulary& TimedQualityTemporalLogicLexer::getVocabulary() const {
  return timedqualitytemporallogiclexerLexerStaticData->vocabulary;
}

antlr4::atn::SerializedATNView TimedQualityTemporalLogicLexer::getSerializedATN() const {
  return timedqualitytemporallogiclexerLexerStaticData->serializedATN;
}

const atn::ATN& TimedQualityTemporalLogicLexer::getATN() const {
  return *timedqualitytemporallogiclexerLexerStaticData->atn;
}




void TimedQualityTemporalLogicLexer::initialize() {
  ::antlr4::internal::call_once(timedqualitytemporallogiclexerLexerOnceFlag, timedqualitytemporallogiclexerLexerInitialize);
}
