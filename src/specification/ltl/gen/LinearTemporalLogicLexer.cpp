
// Generated from /home/andersonjwan/Projects/pyforel/build/antlr/grammars/LinearTemporalLogicLexer.g4 by ANTLR 4.11.1


#include "LinearTemporalLogicLexer.h"


using namespace antlr4;

using namespace gen;


using namespace antlr4;

namespace {

struct LinearTemporalLogicLexerStaticData final {
  LinearTemporalLogicLexerStaticData(std::vector<std::string> ruleNames,
                          std::vector<std::string> channelNames,
                          std::vector<std::string> modeNames,
                          std::vector<std::string> literalNames,
                          std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), channelNames(std::move(channelNames)),
        modeNames(std::move(modeNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  LinearTemporalLogicLexerStaticData(const LinearTemporalLogicLexerStaticData&) = delete;
  LinearTemporalLogicLexerStaticData(LinearTemporalLogicLexerStaticData&&) = delete;
  LinearTemporalLogicLexerStaticData& operator=(const LinearTemporalLogicLexerStaticData&) = delete;
  LinearTemporalLogicLexerStaticData& operator=(LinearTemporalLogicLexerStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> channelNames;
  const std::vector<std::string> modeNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag lineartemporallogiclexerLexerOnceFlag;
LinearTemporalLogicLexerStaticData *lineartemporallogiclexerLexerStaticData = nullptr;

void lineartemporallogiclexerLexerInitialize() {
  assert(lineartemporallogiclexerLexerStaticData == nullptr);
  auto staticData = std::make_unique<LinearTemporalLogicLexerStaticData>(
    std::vector<std::string>{
      "EventuallyOperator", "AlwaysOperator", "NextOperator", "UntilOperator", 
      "ReleaseOperator", "NegationOperator", "ConjunctionOperator", "DisjunctionOperator", 
      "ImplicationOperator", "IffOperator", "True", "False", "At", "Ampersand", 
      "Apostrophe", "Asterick", "Bar", "Caret", "Colon", "Comma", "DollarSign", 
      "Dot", "Equal", "ExclamationMark", "GraveAccent", "Hash", "Minus", 
      "PercentSign", "Plus", "QuestionMark", "QuotationMark", "Semicolon", 
      "Tilde", "Underscore", "Slash", "BackSlash", "LeftBrace", "RightBrace", 
      "LeftBracket", "RightBracket", "LeftChevron", "RightChevron", "LeftParenthesis", 
      "RightParenthesis", "BlockComment", "LineComment", "Scalar", "Integer", 
      "DecimalInteger", "BinaryInteger", "OctalInteger", "HexInteger", "Floating", 
      "PointFloat", "ExponentFloat", "Identifier", "LETTER", "NONDIGIT", 
      "BINDIGIT", "HEXDIGIT", "OCTALDIGIT", "FRACTION", "EXPONENT", "NONZERODIGIT", 
      "DIGIT", "Whitespace"
    },
    std::vector<std::string>{
      "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    },
    std::vector<std::string>{
      "DEFAULT_MODE"
    },
    std::vector<std::string>{
      "", "", "", "", "", "", "", "", "", "", "", "'True'", "'False'", "'@'", 
      "'&'", "'''", "'*'", "'|'", "'^'", "':'", "','", "'$'", "'.'", "'='", 
      "'!'", "'`'", "'#'", "'-'", "'%'", "'+'", "'\\u003F'", "'\"'", "';'", 
      "'~'", "'_'", "'/'", "'\\'", "'{'", "'}'", "'['", "']'", "'<'", "'>'", 
      "'('", "')'"
    },
    std::vector<std::string>{
      "", "EventuallyOperator", "AlwaysOperator", "NextOperator", "UntilOperator", 
      "ReleaseOperator", "NegationOperator", "ConjunctionOperator", "DisjunctionOperator", 
      "ImplicationOperator", "IffOperator", "True", "False", "At", "Ampersand", 
      "Apostrophe", "Asterick", "Bar", "Caret", "Colon", "Comma", "DollarSign", 
      "Dot", "Equal", "ExclamationMark", "GraveAccent", "Hash", "Minus", 
      "PercentSign", "Plus", "QuestionMark", "QuotationMark", "Semicolon", 
      "Tilde", "Underscore", "Slash", "BackSlash", "LeftBrace", "RightBrace", 
      "LeftBracket", "RightBracket", "LeftChevron", "RightChevron", "LeftParenthesis", 
      "RightParenthesis", "BlockComment", "LineComment", "Scalar", "Integer", 
      "DecimalInteger", "BinaryInteger", "OctalInteger", "HexInteger", "Floating", 
      "PointFloat", "ExponentFloat", "Identifier", "Whitespace"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,0,57,447,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
  	6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
  	7,63,2,64,7,64,2,65,7,65,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,
  	3,0,145,8,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,154,8,1,1,2,1,2,1,2,1,2,1,
  	2,3,2,161,8,2,1,3,1,3,1,3,1,3,1,3,1,3,3,3,169,8,3,1,4,1,4,1,4,1,4,1,4,
  	1,4,1,4,1,4,3,4,179,8,4,1,5,1,5,1,5,1,5,3,5,185,8,5,1,6,1,6,1,6,1,6,3,
  	6,191,8,6,1,7,1,7,1,7,3,7,196,8,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,
  	3,8,207,8,8,1,9,1,9,1,9,1,9,1,9,1,9,3,9,215,8,9,1,10,1,10,1,10,1,10,1,
  	10,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,
  	15,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,
  	22,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,28,1,29,1,
  	29,1,30,1,30,1,31,1,31,1,32,1,32,1,33,1,33,1,34,1,34,1,35,1,35,1,36,1,
  	36,1,37,1,37,1,38,1,38,1,39,1,39,1,40,1,40,1,41,1,41,1,42,1,42,1,43,1,
  	43,1,44,1,44,1,44,1,44,5,44,296,8,44,10,44,12,44,299,9,44,1,44,1,44,1,
  	44,1,44,1,44,1,45,1,45,1,45,1,45,5,45,310,8,45,10,45,12,45,313,9,45,1,
  	45,3,45,316,8,45,1,45,1,45,1,45,1,45,1,46,1,46,3,46,324,8,46,1,47,1,47,
  	1,47,1,47,3,47,330,8,47,1,48,1,48,5,48,334,8,48,10,48,12,48,337,9,48,
  	1,48,4,48,340,8,48,11,48,12,48,341,3,48,344,8,48,1,49,1,49,1,49,4,49,
  	349,8,49,11,49,12,49,350,1,50,1,50,1,50,4,50,356,8,50,11,50,12,50,357,
  	1,51,1,51,1,51,4,51,363,8,51,11,51,12,51,364,1,52,1,52,3,52,369,8,52,
  	1,53,4,53,372,8,53,11,53,12,53,373,3,53,376,8,53,1,53,1,53,4,53,380,8,
  	53,11,53,12,53,381,1,53,1,53,3,53,386,8,53,1,54,4,54,389,8,54,11,54,12,
  	54,390,1,54,3,54,394,8,54,1,54,1,54,1,55,4,55,399,8,55,11,55,12,55,400,
  	1,55,1,55,5,55,405,8,55,10,55,12,55,408,9,55,1,56,1,56,1,57,1,57,3,57,
  	414,8,57,1,58,1,58,1,59,1,59,1,60,1,60,1,61,1,61,4,61,424,8,61,11,61,
  	12,61,425,1,62,1,62,3,62,430,8,62,1,62,4,62,433,8,62,11,62,12,62,434,
  	1,63,1,63,1,64,1,64,1,65,4,65,442,8,65,11,65,12,65,443,1,65,1,65,2,297,
  	311,0,66,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,
  	13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,
  	49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,
  	36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,89,45,91,46,93,47,
  	95,48,97,49,99,50,101,51,103,52,105,53,107,54,109,55,111,56,113,0,115,
  	0,117,0,119,0,121,0,123,0,125,0,127,0,129,0,131,57,1,0,12,2,0,66,66,98,
  	98,2,0,79,79,111,111,2,0,88,88,120,120,2,0,65,90,97,122,1,0,48,49,3,0,
  	48,57,65,70,97,102,1,0,48,55,2,0,69,69,101,101,2,0,43,43,45,45,1,0,49,
  	57,1,0,48,57,3,0,9,10,13,13,32,32,475,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,
  	0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,
  	17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,
  	0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,
  	0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,
  	49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,
  	0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,
  	0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,
  	81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,
  	0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,
  	0,0,103,1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,0,109,1,0,0,0,0,111,1,0,0,
  	0,0,131,1,0,0,0,1,144,1,0,0,0,3,153,1,0,0,0,5,160,1,0,0,0,7,168,1,0,0,
  	0,9,178,1,0,0,0,11,184,1,0,0,0,13,190,1,0,0,0,15,195,1,0,0,0,17,206,1,
  	0,0,0,19,214,1,0,0,0,21,216,1,0,0,0,23,221,1,0,0,0,25,227,1,0,0,0,27,
  	229,1,0,0,0,29,231,1,0,0,0,31,233,1,0,0,0,33,235,1,0,0,0,35,237,1,0,0,
  	0,37,239,1,0,0,0,39,241,1,0,0,0,41,243,1,0,0,0,43,245,1,0,0,0,45,247,
  	1,0,0,0,47,249,1,0,0,0,49,251,1,0,0,0,51,253,1,0,0,0,53,255,1,0,0,0,55,
  	257,1,0,0,0,57,259,1,0,0,0,59,261,1,0,0,0,61,263,1,0,0,0,63,265,1,0,0,
  	0,65,267,1,0,0,0,67,269,1,0,0,0,69,271,1,0,0,0,71,273,1,0,0,0,73,275,
  	1,0,0,0,75,277,1,0,0,0,77,279,1,0,0,0,79,281,1,0,0,0,81,283,1,0,0,0,83,
  	285,1,0,0,0,85,287,1,0,0,0,87,289,1,0,0,0,89,291,1,0,0,0,91,305,1,0,0,
  	0,93,323,1,0,0,0,95,329,1,0,0,0,97,343,1,0,0,0,99,345,1,0,0,0,101,352,
  	1,0,0,0,103,359,1,0,0,0,105,368,1,0,0,0,107,385,1,0,0,0,109,393,1,0,0,
  	0,111,398,1,0,0,0,113,409,1,0,0,0,115,413,1,0,0,0,117,415,1,0,0,0,119,
  	417,1,0,0,0,121,419,1,0,0,0,123,421,1,0,0,0,125,427,1,0,0,0,127,436,1,
  	0,0,0,129,438,1,0,0,0,131,441,1,0,0,0,133,145,5,70,0,0,134,135,5,101,
  	0,0,135,136,5,118,0,0,136,137,5,101,0,0,137,138,5,110,0,0,138,139,5,116,
  	0,0,139,140,5,117,0,0,140,141,5,97,0,0,141,142,5,108,0,0,142,143,5,108,
  	0,0,143,145,5,121,0,0,144,133,1,0,0,0,144,134,1,0,0,0,145,2,1,0,0,0,146,
  	154,5,71,0,0,147,148,5,97,0,0,148,149,5,108,0,0,149,150,5,119,0,0,150,
  	151,5,97,0,0,151,152,5,121,0,0,152,154,5,115,0,0,153,146,1,0,0,0,153,
  	147,1,0,0,0,154,4,1,0,0,0,155,161,5,88,0,0,156,157,5,110,0,0,157,158,
  	5,101,0,0,158,159,5,120,0,0,159,161,5,116,0,0,160,155,1,0,0,0,160,156,
  	1,0,0,0,161,6,1,0,0,0,162,169,5,85,0,0,163,164,5,117,0,0,164,165,5,110,
  	0,0,165,166,5,116,0,0,166,167,5,105,0,0,167,169,5,108,0,0,168,162,1,0,
  	0,0,168,163,1,0,0,0,169,8,1,0,0,0,170,179,5,82,0,0,171,172,5,114,0,0,
  	172,173,5,101,0,0,173,174,5,108,0,0,174,175,5,101,0,0,175,176,5,97,0,
  	0,176,177,5,115,0,0,177,179,5,101,0,0,178,170,1,0,0,0,178,171,1,0,0,0,
  	179,10,1,0,0,0,180,185,3,47,23,0,181,182,5,110,0,0,182,183,5,111,0,0,
  	183,185,5,116,0,0,184,180,1,0,0,0,184,181,1,0,0,0,185,12,1,0,0,0,186,
  	191,3,27,13,0,187,188,5,97,0,0,188,189,5,110,0,0,189,191,5,100,0,0,190,
  	186,1,0,0,0,190,187,1,0,0,0,191,14,1,0,0,0,192,196,3,33,16,0,193,194,
  	5,111,0,0,194,196,5,114,0,0,195,192,1,0,0,0,195,193,1,0,0,0,196,16,1,
  	0,0,0,197,198,5,45,0,0,198,207,5,62,0,0,199,200,5,105,0,0,200,201,5,109,
  	0,0,201,202,5,112,0,0,202,203,5,108,0,0,203,204,5,105,0,0,204,205,5,101,
  	0,0,205,207,5,115,0,0,206,197,1,0,0,0,206,199,1,0,0,0,207,18,1,0,0,0,
  	208,209,5,60,0,0,209,210,5,45,0,0,210,215,5,62,0,0,211,212,5,105,0,0,
  	212,213,5,102,0,0,213,215,5,102,0,0,214,208,1,0,0,0,214,211,1,0,0,0,215,
  	20,1,0,0,0,216,217,5,84,0,0,217,218,5,114,0,0,218,219,5,117,0,0,219,220,
  	5,101,0,0,220,22,1,0,0,0,221,222,5,70,0,0,222,223,5,97,0,0,223,224,5,
  	108,0,0,224,225,5,115,0,0,225,226,5,101,0,0,226,24,1,0,0,0,227,228,5,
  	64,0,0,228,26,1,0,0,0,229,230,5,38,0,0,230,28,1,0,0,0,231,232,5,39,0,
  	0,232,30,1,0,0,0,233,234,5,42,0,0,234,32,1,0,0,0,235,236,5,124,0,0,236,
  	34,1,0,0,0,237,238,5,94,0,0,238,36,1,0,0,0,239,240,5,58,0,0,240,38,1,
  	0,0,0,241,242,5,44,0,0,242,40,1,0,0,0,243,244,5,36,0,0,244,42,1,0,0,0,
  	245,246,5,46,0,0,246,44,1,0,0,0,247,248,5,61,0,0,248,46,1,0,0,0,249,250,
  	5,33,0,0,250,48,1,0,0,0,251,252,5,96,0,0,252,50,1,0,0,0,253,254,5,35,
  	0,0,254,52,1,0,0,0,255,256,5,45,0,0,256,54,1,0,0,0,257,258,5,37,0,0,258,
  	56,1,0,0,0,259,260,5,43,0,0,260,58,1,0,0,0,261,262,5,63,0,0,262,60,1,
  	0,0,0,263,264,5,34,0,0,264,62,1,0,0,0,265,266,5,59,0,0,266,64,1,0,0,0,
  	267,268,5,126,0,0,268,66,1,0,0,0,269,270,5,95,0,0,270,68,1,0,0,0,271,
  	272,5,47,0,0,272,70,1,0,0,0,273,274,5,92,0,0,274,72,1,0,0,0,275,276,5,
  	123,0,0,276,74,1,0,0,0,277,278,5,125,0,0,278,76,1,0,0,0,279,280,5,91,
  	0,0,280,78,1,0,0,0,281,282,5,93,0,0,282,80,1,0,0,0,283,284,5,60,0,0,284,
  	82,1,0,0,0,285,286,5,62,0,0,286,84,1,0,0,0,287,288,5,40,0,0,288,86,1,
  	0,0,0,289,290,5,41,0,0,290,88,1,0,0,0,291,292,5,47,0,0,292,293,5,42,0,
  	0,293,297,1,0,0,0,294,296,9,0,0,0,295,294,1,0,0,0,296,299,1,0,0,0,297,
  	298,1,0,0,0,297,295,1,0,0,0,298,300,1,0,0,0,299,297,1,0,0,0,300,301,5,
  	42,0,0,301,302,5,47,0,0,302,303,1,0,0,0,303,304,6,44,0,0,304,90,1,0,0,
  	0,305,306,5,47,0,0,306,307,5,47,0,0,307,311,1,0,0,0,308,310,9,0,0,0,309,
  	308,1,0,0,0,310,313,1,0,0,0,311,312,1,0,0,0,311,309,1,0,0,0,312,315,1,
  	0,0,0,313,311,1,0,0,0,314,316,5,13,0,0,315,314,1,0,0,0,315,316,1,0,0,
  	0,316,317,1,0,0,0,317,318,5,10,0,0,318,319,1,0,0,0,319,320,6,45,0,0,320,
  	92,1,0,0,0,321,324,3,95,47,0,322,324,3,105,52,0,323,321,1,0,0,0,323,322,
  	1,0,0,0,324,94,1,0,0,0,325,330,3,97,48,0,326,330,3,99,49,0,327,330,3,
  	101,50,0,328,330,3,103,51,0,329,325,1,0,0,0,329,326,1,0,0,0,329,327,1,
  	0,0,0,329,328,1,0,0,0,330,96,1,0,0,0,331,335,3,127,63,0,332,334,3,129,
  	64,0,333,332,1,0,0,0,334,337,1,0,0,0,335,333,1,0,0,0,335,336,1,0,0,0,
  	336,344,1,0,0,0,337,335,1,0,0,0,338,340,5,48,0,0,339,338,1,0,0,0,340,
  	341,1,0,0,0,341,339,1,0,0,0,341,342,1,0,0,0,342,344,1,0,0,0,343,331,1,
  	0,0,0,343,339,1,0,0,0,344,98,1,0,0,0,345,346,5,48,0,0,346,348,7,0,0,0,
  	347,349,3,117,58,0,348,347,1,0,0,0,349,350,1,0,0,0,350,348,1,0,0,0,350,
  	351,1,0,0,0,351,100,1,0,0,0,352,353,5,48,0,0,353,355,7,1,0,0,354,356,
  	3,121,60,0,355,354,1,0,0,0,356,357,1,0,0,0,357,355,1,0,0,0,357,358,1,
  	0,0,0,358,102,1,0,0,0,359,360,5,48,0,0,360,362,7,2,0,0,361,363,3,119,
  	59,0,362,361,1,0,0,0,363,364,1,0,0,0,364,362,1,0,0,0,364,365,1,0,0,0,
  	365,104,1,0,0,0,366,369,3,107,53,0,367,369,3,109,54,0,368,366,1,0,0,0,
  	368,367,1,0,0,0,369,106,1,0,0,0,370,372,3,129,64,0,371,370,1,0,0,0,372,
  	373,1,0,0,0,373,371,1,0,0,0,373,374,1,0,0,0,374,376,1,0,0,0,375,371,1,
  	0,0,0,375,376,1,0,0,0,376,377,1,0,0,0,377,386,3,123,61,0,378,380,3,129,
  	64,0,379,378,1,0,0,0,380,381,1,0,0,0,381,379,1,0,0,0,381,382,1,0,0,0,
  	382,383,1,0,0,0,383,384,5,46,0,0,384,386,1,0,0,0,385,375,1,0,0,0,385,
  	379,1,0,0,0,386,108,1,0,0,0,387,389,3,129,64,0,388,387,1,0,0,0,389,390,
  	1,0,0,0,390,388,1,0,0,0,390,391,1,0,0,0,391,394,1,0,0,0,392,394,3,107,
  	53,0,393,388,1,0,0,0,393,392,1,0,0,0,394,395,1,0,0,0,395,396,3,125,62,
  	0,396,110,1,0,0,0,397,399,3,115,57,0,398,397,1,0,0,0,399,400,1,0,0,0,
  	400,398,1,0,0,0,400,401,1,0,0,0,401,406,1,0,0,0,402,405,3,115,57,0,403,
  	405,3,129,64,0,404,402,1,0,0,0,404,403,1,0,0,0,405,408,1,0,0,0,406,404,
  	1,0,0,0,406,407,1,0,0,0,407,112,1,0,0,0,408,406,1,0,0,0,409,410,7,3,0,
  	0,410,114,1,0,0,0,411,414,3,113,56,0,412,414,5,95,0,0,413,411,1,0,0,0,
  	413,412,1,0,0,0,414,116,1,0,0,0,415,416,7,4,0,0,416,118,1,0,0,0,417,418,
  	7,5,0,0,418,120,1,0,0,0,419,420,7,6,0,0,420,122,1,0,0,0,421,423,5,46,
  	0,0,422,424,3,129,64,0,423,422,1,0,0,0,424,425,1,0,0,0,425,423,1,0,0,
  	0,425,426,1,0,0,0,426,124,1,0,0,0,427,429,7,7,0,0,428,430,7,8,0,0,429,
  	428,1,0,0,0,429,430,1,0,0,0,430,432,1,0,0,0,431,433,3,129,64,0,432,431,
  	1,0,0,0,433,434,1,0,0,0,434,432,1,0,0,0,434,435,1,0,0,0,435,126,1,0,0,
  	0,436,437,7,9,0,0,437,128,1,0,0,0,438,439,7,10,0,0,439,130,1,0,0,0,440,
  	442,7,11,0,0,441,440,1,0,0,0,442,443,1,0,0,0,443,441,1,0,0,0,443,444,
  	1,0,0,0,444,445,1,0,0,0,445,446,6,65,0,0,446,132,1,0,0,0,37,0,144,153,
  	160,168,178,184,190,195,206,214,297,311,315,323,329,335,341,343,350,357,
  	364,368,373,375,381,385,390,393,400,404,406,413,425,429,434,443,1,6,0,
  	0
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  lineartemporallogiclexerLexerStaticData = staticData.release();
}

}

LinearTemporalLogicLexer::LinearTemporalLogicLexer(CharStream *input) : Lexer(input) {
  LinearTemporalLogicLexer::initialize();
  _interpreter = new atn::LexerATNSimulator(this, *lineartemporallogiclexerLexerStaticData->atn, lineartemporallogiclexerLexerStaticData->decisionToDFA, lineartemporallogiclexerLexerStaticData->sharedContextCache);
}

LinearTemporalLogicLexer::~LinearTemporalLogicLexer() {
  delete _interpreter;
}

std::string LinearTemporalLogicLexer::getGrammarFileName() const {
  return "LinearTemporalLogicLexer.g4";
}

const std::vector<std::string>& LinearTemporalLogicLexer::getRuleNames() const {
  return lineartemporallogiclexerLexerStaticData->ruleNames;
}

const std::vector<std::string>& LinearTemporalLogicLexer::getChannelNames() const {
  return lineartemporallogiclexerLexerStaticData->channelNames;
}

const std::vector<std::string>& LinearTemporalLogicLexer::getModeNames() const {
  return lineartemporallogiclexerLexerStaticData->modeNames;
}

const dfa::Vocabulary& LinearTemporalLogicLexer::getVocabulary() const {
  return lineartemporallogiclexerLexerStaticData->vocabulary;
}

antlr4::atn::SerializedATNView LinearTemporalLogicLexer::getSerializedATN() const {
  return lineartemporallogiclexerLexerStaticData->serializedATN;
}

const atn::ATN& LinearTemporalLogicLexer::getATN() const {
  return *lineartemporallogiclexerLexerStaticData->atn;
}




void LinearTemporalLogicLexer::initialize() {
  ::antlr4::internal::call_once(lineartemporallogiclexerLexerOnceFlag, lineartemporallogiclexerLexerInitialize);
}
