
// Generated from /home/andersonjwan/Projects/forek/build/antlr/grammars/TimedPropositionalTemporalLogicLexer.g4 by ANTLR 4.11.1


#include "TimedPropositionalTemporalLogicLexer.h"


using namespace antlr4;

using namespace gen;


using namespace antlr4;

namespace {

struct TimedPropositionalTemporalLogicLexerStaticData final {
  TimedPropositionalTemporalLogicLexerStaticData(std::vector<std::string> ruleNames,
                          std::vector<std::string> channelNames,
                          std::vector<std::string> modeNames,
                          std::vector<std::string> literalNames,
                          std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), channelNames(std::move(channelNames)),
        modeNames(std::move(modeNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  TimedPropositionalTemporalLogicLexerStaticData(const TimedPropositionalTemporalLogicLexerStaticData&) = delete;
  TimedPropositionalTemporalLogicLexerStaticData(TimedPropositionalTemporalLogicLexerStaticData&&) = delete;
  TimedPropositionalTemporalLogicLexerStaticData& operator=(const TimedPropositionalTemporalLogicLexerStaticData&) = delete;
  TimedPropositionalTemporalLogicLexerStaticData& operator=(TimedPropositionalTemporalLogicLexerStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> channelNames;
  const std::vector<std::string> modeNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag timedpropositionaltemporallogiclexerLexerOnceFlag;
TimedPropositionalTemporalLogicLexerStaticData *timedpropositionaltemporallogiclexerLexerStaticData = nullptr;

void timedpropositionaltemporallogiclexerLexerInitialize() {
  assert(timedpropositionaltemporallogiclexerLexerStaticData == nullptr);
  auto staticData = std::make_unique<TimedPropositionalTemporalLogicLexerStaticData>(
    std::vector<std::string>{
      "FreezeTime", "LessThanOrEqualTo", "GreaterThanOrEqualTo", "LessThan", 
      "GreaterThan", "EqualTo", "NotEqualTo", "EventuallyOperator", "AlwaysOperator", 
      "NextOperator", "UntilOperator", "ReleaseOperator", "NegationOperator", 
      "ConjunctionOperator", "DisjunctionOperator", "ImplicationOperator", 
      "IffOperator", "True", "False", "AT", "AMPERSAND", "APOSTROPHE", "ASTERICK", 
      "BAR", "CARET", "COLON", "COMMA", "DOLLARSIGN", "DOT", "EQUAL", "EXCLAMATIONMARK", 
      "GRAVEACCENT", "HASH", "MINUS", "PERCENTSIGN", "PLUS", "QUESTIONMARK", 
      "QUOTATIONMARK", "SEMICOLON", "TILDE", "UNDERSCORE", "SLASH", "BACKSLASH", 
      "LeftBrace", "RightBrace", "LeftBracket", "RightBracket", "LEFTCHEVRON", 
      "RIGHTCHEVRON", "LeftParenthesis", "RightParenthesis", "BlockComment", 
      "LineComment", "Infinity", "Scalar", "Integer", "DecimalInteger", 
      "BinaryInteger", "OctalInteger", "HexInteger", "Floating", "PointFloat", 
      "ExponentFloat", "Identifier", "LETTER", "NONDIGIT", "BINDIGIT", "HEXDIGIT", 
      "OCTALDIGIT", "FRACTION", "EXPONENT", "NONZERODIGIT", "DIGIT", "Whitespace", 
      "AdditionOperator", "SubtractionOperator", "MultiplicationOperator", 
      "DivisionOperator"
    },
    std::vector<std::string>{
      "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    },
    std::vector<std::string>{
      "DEFAULT_MODE"
    },
    std::vector<std::string>{
      "", "", "'<='", "'>='", "", "", "'=='", "'!='", "", "", "", "", "", 
      "", "", "", "", "", "'true'", "'false'", "'{'", "'}'", "'['", "']'", 
      "'('", "')'", "", "", "'inf'"
    },
    std::vector<std::string>{
      "", "FreezeTime", "LessThanOrEqualTo", "GreaterThanOrEqualTo", "LessThan", 
      "GreaterThan", "EqualTo", "NotEqualTo", "EventuallyOperator", "AlwaysOperator", 
      "NextOperator", "UntilOperator", "ReleaseOperator", "NegationOperator", 
      "ConjunctionOperator", "DisjunctionOperator", "ImplicationOperator", 
      "IffOperator", "True", "False", "LeftBrace", "RightBrace", "LeftBracket", 
      "RightBracket", "LeftParenthesis", "RightParenthesis", "BlockComment", 
      "LineComment", "Infinity", "Scalar", "Integer", "DecimalInteger", 
      "BinaryInteger", "OctalInteger", "HexInteger", "Floating", "PointFloat", 
      "ExponentFloat", "Identifier", "Whitespace", "AdditionOperator", "SubtractionOperator", 
      "MultiplicationOperator", "DivisionOperator"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,0,43,506,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
  	6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
  	7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,
  	7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,
  	7,77,1,0,1,0,1,0,3,0,161,8,0,1,1,1,1,1,1,1,2,1,2,1,2,1,3,1,3,1,4,1,4,
  	1,5,1,5,1,5,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,3,
  	7,190,8,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,199,8,8,1,9,1,9,1,9,1,9,1,9,
  	3,9,206,8,9,1,10,1,10,1,10,1,10,1,10,1,10,3,10,214,8,10,1,11,1,11,1,11,
  	1,11,1,11,1,11,1,11,1,11,3,11,224,8,11,1,12,1,12,1,12,1,12,3,12,230,8,
  	12,1,13,1,13,1,13,1,13,1,13,3,13,237,8,13,1,14,1,14,1,14,1,14,3,14,243,
  	8,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,3,15,254,8,15,1,16,
  	1,16,1,16,1,16,1,16,1,16,3,16,262,8,16,1,17,1,17,1,17,1,17,1,17,1,18,
  	1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,23,
  	1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,28,1,29,1,29,1,30,
  	1,30,1,31,1,31,1,32,1,32,1,33,1,33,1,34,1,34,1,35,1,35,1,36,1,36,1,37,
  	1,37,1,38,1,38,1,39,1,39,1,40,1,40,1,41,1,41,1,42,1,42,1,43,1,43,1,44,
  	1,44,1,45,1,45,1,46,1,46,1,47,1,47,1,48,1,48,1,49,1,49,1,50,1,50,1,51,
  	1,51,1,51,1,51,5,51,343,8,51,10,51,12,51,346,9,51,1,51,1,51,1,51,1,51,
  	1,51,1,52,1,52,1,52,1,52,5,52,357,8,52,10,52,12,52,360,9,52,1,52,3,52,
  	363,8,52,1,52,1,52,1,52,1,52,1,53,1,53,1,53,1,53,1,54,1,54,3,54,375,8,
  	54,1,55,1,55,1,55,1,55,3,55,381,8,55,1,56,1,56,5,56,385,8,56,10,56,12,
  	56,388,9,56,1,56,4,56,391,8,56,11,56,12,56,392,3,56,395,8,56,1,57,1,57,
  	1,57,4,57,400,8,57,11,57,12,57,401,1,58,1,58,1,58,4,58,407,8,58,11,58,
  	12,58,408,1,59,1,59,1,59,4,59,414,8,59,11,59,12,59,415,1,60,1,60,3,60,
  	420,8,60,1,61,4,61,423,8,61,11,61,12,61,424,3,61,427,8,61,1,61,1,61,4,
  	61,431,8,61,11,61,12,61,432,1,61,1,61,3,61,437,8,61,1,62,4,62,440,8,62,
  	11,62,12,62,441,1,62,3,62,445,8,62,1,62,1,62,1,63,4,63,450,8,63,11,63,
  	12,63,451,1,63,1,63,5,63,456,8,63,10,63,12,63,459,9,63,1,64,1,64,1,65,
  	1,65,3,65,465,8,65,1,66,1,66,1,67,1,67,1,68,1,68,1,69,1,69,4,69,475,8,
  	69,11,69,12,69,476,1,70,1,70,3,70,481,8,70,1,70,4,70,484,8,70,11,70,12,
  	70,485,1,71,1,71,1,72,1,72,1,73,4,73,493,8,73,11,73,12,73,494,1,73,1,
  	73,1,74,1,74,1,75,1,75,1,76,1,76,1,77,1,77,2,344,358,0,78,1,1,3,2,5,3,
  	7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,
  	33,17,35,18,37,19,39,0,41,0,43,0,45,0,47,0,49,0,51,0,53,0,55,0,57,0,59,
  	0,61,0,63,0,65,0,67,0,69,0,71,0,73,0,75,0,77,0,79,0,81,0,83,0,85,0,87,
  	20,89,21,91,22,93,23,95,0,97,0,99,24,101,25,103,26,105,27,107,28,109,
  	29,111,30,113,31,115,32,117,33,119,34,121,35,123,36,125,37,127,38,129,
  	0,131,0,133,0,135,0,137,0,139,0,141,0,143,0,145,0,147,39,149,40,151,41,
  	153,42,155,43,1,0,12,2,0,66,66,98,98,2,0,79,79,111,111,2,0,88,88,120,
  	120,2,0,65,90,97,122,1,0,48,49,3,0,48,57,65,70,97,102,1,0,48,55,2,0,69,
  	69,101,101,2,0,43,43,45,45,1,0,49,57,1,0,48,57,3,0,9,10,13,13,32,32,509,
  	0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,
  	0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,
  	0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,
  	1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,
  	0,0,0,93,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,
  	0,0,107,1,0,0,0,0,109,1,0,0,0,0,111,1,0,0,0,0,113,1,0,0,0,0,115,1,0,0,
  	0,0,117,1,0,0,0,0,119,1,0,0,0,0,121,1,0,0,0,0,123,1,0,0,0,0,125,1,0,0,
  	0,0,127,1,0,0,0,0,147,1,0,0,0,0,149,1,0,0,0,0,151,1,0,0,0,0,153,1,0,0,
  	0,0,155,1,0,0,0,1,160,1,0,0,0,3,162,1,0,0,0,5,165,1,0,0,0,7,168,1,0,0,
  	0,9,170,1,0,0,0,11,172,1,0,0,0,13,175,1,0,0,0,15,189,1,0,0,0,17,198,1,
  	0,0,0,19,205,1,0,0,0,21,213,1,0,0,0,23,223,1,0,0,0,25,229,1,0,0,0,27,
  	236,1,0,0,0,29,242,1,0,0,0,31,253,1,0,0,0,33,261,1,0,0,0,35,263,1,0,0,
  	0,37,268,1,0,0,0,39,274,1,0,0,0,41,276,1,0,0,0,43,278,1,0,0,0,45,280,
  	1,0,0,0,47,282,1,0,0,0,49,284,1,0,0,0,51,286,1,0,0,0,53,288,1,0,0,0,55,
  	290,1,0,0,0,57,292,1,0,0,0,59,294,1,0,0,0,61,296,1,0,0,0,63,298,1,0,0,
  	0,65,300,1,0,0,0,67,302,1,0,0,0,69,304,1,0,0,0,71,306,1,0,0,0,73,308,
  	1,0,0,0,75,310,1,0,0,0,77,312,1,0,0,0,79,314,1,0,0,0,81,316,1,0,0,0,83,
  	318,1,0,0,0,85,320,1,0,0,0,87,322,1,0,0,0,89,324,1,0,0,0,91,326,1,0,0,
  	0,93,328,1,0,0,0,95,330,1,0,0,0,97,332,1,0,0,0,99,334,1,0,0,0,101,336,
  	1,0,0,0,103,338,1,0,0,0,105,352,1,0,0,0,107,368,1,0,0,0,109,374,1,0,0,
  	0,111,380,1,0,0,0,113,394,1,0,0,0,115,396,1,0,0,0,117,403,1,0,0,0,119,
  	410,1,0,0,0,121,419,1,0,0,0,123,436,1,0,0,0,125,444,1,0,0,0,127,449,1,
  	0,0,0,129,460,1,0,0,0,131,464,1,0,0,0,133,466,1,0,0,0,135,468,1,0,0,0,
  	137,470,1,0,0,0,139,472,1,0,0,0,141,478,1,0,0,0,143,487,1,0,0,0,145,489,
  	1,0,0,0,147,492,1,0,0,0,149,498,1,0,0,0,151,500,1,0,0,0,153,502,1,0,0,
  	0,155,504,1,0,0,0,157,161,3,39,19,0,158,159,5,97,0,0,159,161,5,116,0,
  	0,160,157,1,0,0,0,160,158,1,0,0,0,161,2,1,0,0,0,162,163,5,60,0,0,163,
  	164,5,61,0,0,164,4,1,0,0,0,165,166,5,62,0,0,166,167,5,61,0,0,167,6,1,
  	0,0,0,168,169,3,95,47,0,169,8,1,0,0,0,170,171,3,97,48,0,171,10,1,0,0,
  	0,172,173,5,61,0,0,173,174,5,61,0,0,174,12,1,0,0,0,175,176,5,33,0,0,176,
  	177,5,61,0,0,177,14,1,0,0,0,178,190,5,70,0,0,179,180,5,101,0,0,180,181,
  	5,118,0,0,181,182,5,101,0,0,182,183,5,110,0,0,183,184,5,116,0,0,184,185,
  	5,117,0,0,185,186,5,97,0,0,186,187,5,108,0,0,187,188,5,108,0,0,188,190,
  	5,121,0,0,189,178,1,0,0,0,189,179,1,0,0,0,190,16,1,0,0,0,191,199,5,71,
  	0,0,192,193,5,97,0,0,193,194,5,108,0,0,194,195,5,119,0,0,195,196,5,97,
  	0,0,196,197,5,121,0,0,197,199,5,115,0,0,198,191,1,0,0,0,198,192,1,0,0,
  	0,199,18,1,0,0,0,200,206,5,88,0,0,201,202,5,110,0,0,202,203,5,101,0,0,
  	203,204,5,120,0,0,204,206,5,116,0,0,205,200,1,0,0,0,205,201,1,0,0,0,206,
  	20,1,0,0,0,207,214,5,85,0,0,208,209,5,117,0,0,209,210,5,110,0,0,210,211,
  	5,116,0,0,211,212,5,105,0,0,212,214,5,108,0,0,213,207,1,0,0,0,213,208,
  	1,0,0,0,214,22,1,0,0,0,215,224,5,82,0,0,216,217,5,114,0,0,217,218,5,101,
  	0,0,218,219,5,108,0,0,219,220,5,101,0,0,220,221,5,97,0,0,221,222,5,115,
  	0,0,222,224,5,101,0,0,223,215,1,0,0,0,223,216,1,0,0,0,224,24,1,0,0,0,
  	225,230,3,61,30,0,226,227,5,110,0,0,227,228,5,111,0,0,228,230,5,116,0,
  	0,229,225,1,0,0,0,229,226,1,0,0,0,230,26,1,0,0,0,231,232,5,38,0,0,232,
  	237,5,38,0,0,233,234,5,97,0,0,234,235,5,110,0,0,235,237,5,100,0,0,236,
  	231,1,0,0,0,236,233,1,0,0,0,237,28,1,0,0,0,238,239,5,124,0,0,239,243,
  	5,124,0,0,240,241,5,111,0,0,241,243,5,114,0,0,242,238,1,0,0,0,242,240,
  	1,0,0,0,243,30,1,0,0,0,244,245,5,45,0,0,245,254,5,62,0,0,246,247,5,105,
  	0,0,247,248,5,109,0,0,248,249,5,112,0,0,249,250,5,108,0,0,250,251,5,105,
  	0,0,251,252,5,101,0,0,252,254,5,115,0,0,253,244,1,0,0,0,253,246,1,0,0,
  	0,254,32,1,0,0,0,255,256,5,60,0,0,256,257,5,45,0,0,257,262,5,62,0,0,258,
  	259,5,105,0,0,259,260,5,102,0,0,260,262,5,102,0,0,261,255,1,0,0,0,261,
  	258,1,0,0,0,262,34,1,0,0,0,263,264,5,116,0,0,264,265,5,114,0,0,265,266,
  	5,117,0,0,266,267,5,101,0,0,267,36,1,0,0,0,268,269,5,102,0,0,269,270,
  	5,97,0,0,270,271,5,108,0,0,271,272,5,115,0,0,272,273,5,101,0,0,273,38,
  	1,0,0,0,274,275,5,64,0,0,275,40,1,0,0,0,276,277,5,38,0,0,277,42,1,0,0,
  	0,278,279,5,39,0,0,279,44,1,0,0,0,280,281,5,42,0,0,281,46,1,0,0,0,282,
  	283,5,124,0,0,283,48,1,0,0,0,284,285,5,94,0,0,285,50,1,0,0,0,286,287,
  	5,58,0,0,287,52,1,0,0,0,288,289,5,44,0,0,289,54,1,0,0,0,290,291,5,36,
  	0,0,291,56,1,0,0,0,292,293,5,46,0,0,293,58,1,0,0,0,294,295,5,61,0,0,295,
  	60,1,0,0,0,296,297,5,33,0,0,297,62,1,0,0,0,298,299,5,96,0,0,299,64,1,
  	0,0,0,300,301,5,35,0,0,301,66,1,0,0,0,302,303,5,45,0,0,303,68,1,0,0,0,
  	304,305,5,37,0,0,305,70,1,0,0,0,306,307,5,43,0,0,307,72,1,0,0,0,308,309,
  	5,63,0,0,309,74,1,0,0,0,310,311,5,34,0,0,311,76,1,0,0,0,312,313,5,59,
  	0,0,313,78,1,0,0,0,314,315,5,126,0,0,315,80,1,0,0,0,316,317,5,95,0,0,
  	317,82,1,0,0,0,318,319,5,47,0,0,319,84,1,0,0,0,320,321,5,92,0,0,321,86,
  	1,0,0,0,322,323,5,123,0,0,323,88,1,0,0,0,324,325,5,125,0,0,325,90,1,0,
  	0,0,326,327,5,91,0,0,327,92,1,0,0,0,328,329,5,93,0,0,329,94,1,0,0,0,330,
  	331,5,60,0,0,331,96,1,0,0,0,332,333,5,62,0,0,333,98,1,0,0,0,334,335,5,
  	40,0,0,335,100,1,0,0,0,336,337,5,41,0,0,337,102,1,0,0,0,338,339,5,47,
  	0,0,339,340,5,42,0,0,340,344,1,0,0,0,341,343,9,0,0,0,342,341,1,0,0,0,
  	343,346,1,0,0,0,344,345,1,0,0,0,344,342,1,0,0,0,345,347,1,0,0,0,346,344,
  	1,0,0,0,347,348,5,42,0,0,348,349,5,47,0,0,349,350,1,0,0,0,350,351,6,51,
  	0,0,351,104,1,0,0,0,352,353,5,47,0,0,353,354,5,47,0,0,354,358,1,0,0,0,
  	355,357,9,0,0,0,356,355,1,0,0,0,357,360,1,0,0,0,358,359,1,0,0,0,358,356,
  	1,0,0,0,359,362,1,0,0,0,360,358,1,0,0,0,361,363,5,13,0,0,362,361,1,0,
  	0,0,362,363,1,0,0,0,363,364,1,0,0,0,364,365,5,10,0,0,365,366,1,0,0,0,
  	366,367,6,52,0,0,367,106,1,0,0,0,368,369,5,105,0,0,369,370,5,110,0,0,
  	370,371,5,102,0,0,371,108,1,0,0,0,372,375,3,111,55,0,373,375,3,121,60,
  	0,374,372,1,0,0,0,374,373,1,0,0,0,375,110,1,0,0,0,376,381,3,113,56,0,
  	377,381,3,115,57,0,378,381,3,117,58,0,379,381,3,119,59,0,380,376,1,0,
  	0,0,380,377,1,0,0,0,380,378,1,0,0,0,380,379,1,0,0,0,381,112,1,0,0,0,382,
  	386,3,143,71,0,383,385,3,145,72,0,384,383,1,0,0,0,385,388,1,0,0,0,386,
  	384,1,0,0,0,386,387,1,0,0,0,387,395,1,0,0,0,388,386,1,0,0,0,389,391,5,
  	48,0,0,390,389,1,0,0,0,391,392,1,0,0,0,392,390,1,0,0,0,392,393,1,0,0,
  	0,393,395,1,0,0,0,394,382,1,0,0,0,394,390,1,0,0,0,395,114,1,0,0,0,396,
  	397,5,48,0,0,397,399,7,0,0,0,398,400,3,133,66,0,399,398,1,0,0,0,400,401,
  	1,0,0,0,401,399,1,0,0,0,401,402,1,0,0,0,402,116,1,0,0,0,403,404,5,48,
  	0,0,404,406,7,1,0,0,405,407,3,137,68,0,406,405,1,0,0,0,407,408,1,0,0,
  	0,408,406,1,0,0,0,408,409,1,0,0,0,409,118,1,0,0,0,410,411,5,48,0,0,411,
  	413,7,2,0,0,412,414,3,135,67,0,413,412,1,0,0,0,414,415,1,0,0,0,415,413,
  	1,0,0,0,415,416,1,0,0,0,416,120,1,0,0,0,417,420,3,123,61,0,418,420,3,
  	125,62,0,419,417,1,0,0,0,419,418,1,0,0,0,420,122,1,0,0,0,421,423,3,145,
  	72,0,422,421,1,0,0,0,423,424,1,0,0,0,424,422,1,0,0,0,424,425,1,0,0,0,
  	425,427,1,0,0,0,426,422,1,0,0,0,426,427,1,0,0,0,427,428,1,0,0,0,428,437,
  	3,139,69,0,429,431,3,145,72,0,430,429,1,0,0,0,431,432,1,0,0,0,432,430,
  	1,0,0,0,432,433,1,0,0,0,433,434,1,0,0,0,434,435,5,46,0,0,435,437,1,0,
  	0,0,436,426,1,0,0,0,436,430,1,0,0,0,437,124,1,0,0,0,438,440,3,145,72,
  	0,439,438,1,0,0,0,440,441,1,0,0,0,441,439,1,0,0,0,441,442,1,0,0,0,442,
  	445,1,0,0,0,443,445,3,123,61,0,444,439,1,0,0,0,444,443,1,0,0,0,445,446,
  	1,0,0,0,446,447,3,141,70,0,447,126,1,0,0,0,448,450,3,131,65,0,449,448,
  	1,0,0,0,450,451,1,0,0,0,451,449,1,0,0,0,451,452,1,0,0,0,452,457,1,0,0,
  	0,453,456,3,131,65,0,454,456,3,145,72,0,455,453,1,0,0,0,455,454,1,0,0,
  	0,456,459,1,0,0,0,457,455,1,0,0,0,457,458,1,0,0,0,458,128,1,0,0,0,459,
  	457,1,0,0,0,460,461,7,3,0,0,461,130,1,0,0,0,462,465,3,129,64,0,463,465,
  	5,95,0,0,464,462,1,0,0,0,464,463,1,0,0,0,465,132,1,0,0,0,466,467,7,4,
  	0,0,467,134,1,0,0,0,468,469,7,5,0,0,469,136,1,0,0,0,470,471,7,6,0,0,471,
  	138,1,0,0,0,472,474,5,46,0,0,473,475,3,145,72,0,474,473,1,0,0,0,475,476,
  	1,0,0,0,476,474,1,0,0,0,476,477,1,0,0,0,477,140,1,0,0,0,478,480,7,7,0,
  	0,479,481,7,8,0,0,480,479,1,0,0,0,480,481,1,0,0,0,481,483,1,0,0,0,482,
  	484,3,145,72,0,483,482,1,0,0,0,484,485,1,0,0,0,485,483,1,0,0,0,485,486,
  	1,0,0,0,486,142,1,0,0,0,487,488,7,9,0,0,488,144,1,0,0,0,489,490,7,10,
  	0,0,490,146,1,0,0,0,491,493,7,11,0,0,492,491,1,0,0,0,493,494,1,0,0,0,
  	494,492,1,0,0,0,494,495,1,0,0,0,495,496,1,0,0,0,496,497,6,73,0,0,497,
  	148,1,0,0,0,498,499,3,71,35,0,499,150,1,0,0,0,500,501,3,67,33,0,501,152,
  	1,0,0,0,502,503,3,45,22,0,503,154,1,0,0,0,504,505,3,83,41,0,505,156,1,
  	0,0,0,38,0,160,189,198,205,213,223,229,236,242,253,261,344,358,362,374,
  	380,386,392,394,401,408,415,419,424,426,432,436,441,444,451,455,457,464,
  	476,480,485,494,1,6,0,0
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  timedpropositionaltemporallogiclexerLexerStaticData = staticData.release();
}

}

TimedPropositionalTemporalLogicLexer::TimedPropositionalTemporalLogicLexer(CharStream *input) : Lexer(input) {
  TimedPropositionalTemporalLogicLexer::initialize();
  _interpreter = new atn::LexerATNSimulator(this, *timedpropositionaltemporallogiclexerLexerStaticData->atn, timedpropositionaltemporallogiclexerLexerStaticData->decisionToDFA, timedpropositionaltemporallogiclexerLexerStaticData->sharedContextCache);
}

TimedPropositionalTemporalLogicLexer::~TimedPropositionalTemporalLogicLexer() {
  delete _interpreter;
}

std::string TimedPropositionalTemporalLogicLexer::getGrammarFileName() const {
  return "TimedPropositionalTemporalLogicLexer.g4";
}

const std::vector<std::string>& TimedPropositionalTemporalLogicLexer::getRuleNames() const {
  return timedpropositionaltemporallogiclexerLexerStaticData->ruleNames;
}

const std::vector<std::string>& TimedPropositionalTemporalLogicLexer::getChannelNames() const {
  return timedpropositionaltemporallogiclexerLexerStaticData->channelNames;
}

const std::vector<std::string>& TimedPropositionalTemporalLogicLexer::getModeNames() const {
  return timedpropositionaltemporallogiclexerLexerStaticData->modeNames;
}

const dfa::Vocabulary& TimedPropositionalTemporalLogicLexer::getVocabulary() const {
  return timedpropositionaltemporallogiclexerLexerStaticData->vocabulary;
}

antlr4::atn::SerializedATNView TimedPropositionalTemporalLogicLexer::getSerializedATN() const {
  return timedpropositionaltemporallogiclexerLexerStaticData->serializedATN;
}

const atn::ATN& TimedPropositionalTemporalLogicLexer::getATN() const {
  return *timedpropositionaltemporallogiclexerLexerStaticData->atn;
}




void TimedPropositionalTemporalLogicLexer::initialize() {
  ::antlr4::internal::call_once(timedpropositionaltemporallogiclexerLexerOnceFlag, timedpropositionaltemporallogiclexerLexerInitialize);
}
